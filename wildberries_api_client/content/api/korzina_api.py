# coding: utf-8

"""
    Opisanie API Kontenta

     <dl> <dt>Slovar sokrahenii:</dt> <dd>KT — kartohka tovara</dd> <dd>NM—- nomenklatura</dd> </dl> Ogranihenia po kolihestvu zaprosov: <dd>Dopuskaetsa maksimum 100 zaprosov v minutu na metody kontenta v celom.</dd> <br> Publihnoe API Kontenta sozdano dla sinhronizacii dannyh mehdu serverami Wildberries i serverami prodavcov. <br> Vy zagruhaete dannye na svoi nositeli, rabotaete s nimi na svoih mohnostah i sinhroniziruetes s nahimi serverami po mere neobhodimosti. <br> <code>Ne dopuskaetsa ispolzovanie API Kontenta v kahestve vnehnei bazy dannyh. Pri prevyhenii limitov na zaprosy dostup k API budet ogranihen.</code> <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.content.api_client import ApiClient


class KorzinaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def content_v2_cards_delete_trash_post(self, body, **kwargs):  # noqa: E501
        """Perenos NM v korzinu  # noqa: E501

        Metod pozvolaet perenesti NM v korzinu. Perenos kartohki v korzinu ne avlaetsa udaleniem kartohki. <span class=\"newM\">new</span><br> <code>VAhNO</code>: Pri perenose NM v korzinu, dannaa NM vyhodit iz KT, to est ei prisvaivaetsa novyi <code>imtID</code>.<br> Kartohka tovara udalaetsa avtomatiheski, esli lehit v korzine bolhe 30 dnei.<br> Korzina zahihaetsa ot kartohek, lehahih v nei bolee 30 dnei, kahduu noh po Moskovskomu vremeni.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_delete_trash_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DeleteTrashBody] body: (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_cards_delete_trash_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_cards_delete_trash_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_v2_cards_delete_trash_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Perenos NM v korzinu  # noqa: E501

        Metod pozvolaet perenesti NM v korzinu. Perenos kartohki v korzinu ne avlaetsa udaleniem kartohki. <span class=\"newM\">new</span><br> <code>VAhNO</code>: Pri perenose NM v korzinu, dannaa NM vyhodit iz KT, to est ei prisvaivaetsa novyi <code>imtID</code>.<br> Kartohka tovara udalaetsa avtomatiheski, esli lehit v korzine bolhe 30 dnei.<br> Korzina zahihaetsa ot kartohek, lehahih v nei bolee 30 dnei, kahduu noh po Moskovskomu vremeni.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_delete_trash_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DeleteTrashBody] body: (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_cards_delete_trash_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_v2_cards_delete_trash_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/cards/delete/trash', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_cards_recover_post(self, body, **kwargs):  # noqa: E501
        """Vosstanovlenie NM iz korziny.  # noqa: E501

        Metod pozvolaet vosstanovit NM iz korziny. <span class=\"newM\">new</span><br> <code>VAhNO</code>: Pri vosstanovlenii NM iz korziny ona ne vozvrahaetsa v KT v kotoroi byla do perenosa v korzinu, to est <code>imtID</code> ostaetsa tot he, hto i byl u NM v korzine.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_recover_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CardsRecoverBody] body: (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_cards_recover_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_cards_recover_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_v2_cards_recover_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Vosstanovlenie NM iz korziny.  # noqa: E501

        Metod pozvolaet vosstanovit NM iz korziny. <span class=\"newM\">new</span><br> <code>VAhNO</code>: Pri vosstanovlenii NM iz korziny ona ne vozvrahaetsa v KT v kotoroi byla do perenosa v korzinu, to est <code>imtID</code> ostaetsa tot he, hto i byl u NM v korzine.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_recover_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CardsRecoverBody] body: (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_cards_recover_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_v2_cards_recover_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/cards/recover', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_get_cards_trash_post(self, body, **kwargs):  # noqa: E501
        """Spisok NM, nahodahihsa v korzine  # noqa: E501

        Metod pozvolaet poluhit spisok NM, nahodahihsa v korzine.  <br> <br>Poradok raboty. <br> htoby poluhit polnyi spisok nomenklatur, <b>esli ih > 1000</b>, neobhodimo vospolzovatsa paginaciei.   <ol>     <li>Cdelat pervyi zapros (vse ukazannye nihe parametry obazatelny): <br>       <pre style=\"background-color: rgb(38 50 56 / 5%); color: #e53935\">         {           \"settings\": {                                 \"cursor\": {             \"limit\": 1000           }            }         }</pre>                                    </li>     <li>Proiti v konec poluhennogo spiska nomenklatur, skopirovat iz <code>cursor</code> dve stroki:       <ul>         <li><code>\"trashedAt\": \"***\"</code>,</li>         <li><code>\"nmID\": ***</code>,</li>       </ul>     <li>Vstavit skopirovannye stroki v <code>cursor</code> zaprosa, povtorit vyzov metoda. </li>     <li>Povtorat punkty <b>2</b> i <b>3</b>, poka <code>total</code> v otvete ne stanet menhe hem <code>limit</code> v zaprose.       <br>Eto budet oznahat, hto Vy poluhili vse kartohki.   </ol>   <br> Po helaniu mohno dobavit poisk i sortirovku. Sm opisanie v <b>Request Body schema</b>   <br> V <b>Request samples</b> predstavlen primer zaprosa so vsemi vozmohnymi parametrami.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_get_cards_trash_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardsTrashBody body: (required)
        :param str locale: azyk polei otveta `name`, `value` i `object`: `ru`, `en`, `zh`.  Ne ispolzuetsa v pesohnice 
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_get_cards_trash_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_get_cards_trash_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_v2_get_cards_trash_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Spisok NM, nahodahihsa v korzine  # noqa: E501

        Metod pozvolaet poluhit spisok NM, nahodahihsa v korzine.  <br> <br>Poradok raboty. <br> htoby poluhit polnyi spisok nomenklatur, <b>esli ih > 1000</b>, neobhodimo vospolzovatsa paginaciei.   <ol>     <li>Cdelat pervyi zapros (vse ukazannye nihe parametry obazatelny): <br>       <pre style=\"background-color: rgb(38 50 56 / 5%); color: #e53935\">         {           \"settings\": {                                 \"cursor\": {             \"limit\": 1000           }            }         }</pre>                                    </li>     <li>Proiti v konec poluhennogo spiska nomenklatur, skopirovat iz <code>cursor</code> dve stroki:       <ul>         <li><code>\"trashedAt\": \"***\"</code>,</li>         <li><code>\"nmID\": ***</code>,</li>       </ul>     <li>Vstavit skopirovannye stroki v <code>cursor</code> zaprosa, povtorit vyzov metoda. </li>     <li>Povtorat punkty <b>2</b> i <b>3</b>, poka <code>total</code> v otvete ne stanet menhe hem <code>limit</code> v zaprose.       <br>Eto budet oznahat, hto Vy poluhili vse kartohki.   </ol>   <br> Po helaniu mohno dobavit poisk i sortirovku. Sm opisanie v <b>Request Body schema</b>   <br> V <b>Request samples</b> predstavlen primer zaprosa so vsemi vozmohnymi parametrami.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_get_cards_trash_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardsTrashBody body: (required)
        :param str locale: azyk polei otveta `name`, `value` i `object`: `ru`, `en`, `zh`.  Ne ispolzuetsa v pesohnice 
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_get_cards_trash_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_v2_get_cards_trash_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/get/cards/trash', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
