# coding: utf-8

"""
    Opisanie API Kontenta

     <dl> <dt>Slovar sokrahenii:</dt> <dd>KT — kartohka tovara</dd> <dd>NM—- nomenklatura</dd> </dl> Ogranihenia po kolihestvu zaprosov: <dd>Dopuskaetsa maksimum 100 zaprosov v minutu na metody kontenta v celom.</dd> <br> Publihnoe API Kontenta sozdano dla sinhronizacii dannyh mehdu serverami Wildberries i serverami prodavcov. <br> Vy zagruhaete dannye na svoi nositeli, rabotaete s nimi na svoih mohnostah i sinhroniziruetes s nahimi serverami po mere neobhodimosti. <br> <code>Ne dopuskaetsa ispolzovanie API Kontenta v kahestve vnehnei bazy dannyh. Pri prevyhenii limitov na zaprosy dostup k API budet ogranihen.</code> <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2005Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject_id': 'int',
        'parent_id': 'int',
        'subject_name': 'str',
        'parent_name': 'str',
        'is_visible': 'bool'
    }

    attribute_map = {
        'subject_id': 'subjectID',
        'parent_id': 'parentID',
        'subject_name': 'subjectName',
        'parent_name': 'parentName',
        'is_visible': 'isVisible'
    }

    def __init__(self, subject_id=None, parent_id=None, subject_name=None, parent_name=None, is_visible=None):  # noqa: E501
        """InlineResponse2005Data - a model defined in Swagger"""  # noqa: E501
        self._subject_id = None
        self._parent_id = None
        self._subject_name = None
        self._parent_name = None
        self._is_visible = None
        self.discriminator = None
        if subject_id is not None:
            self.subject_id = subject_id
        if parent_id is not None:
            self.parent_id = parent_id
        if subject_name is not None:
            self.subject_name = subject_name
        if parent_name is not None:
            self.parent_name = parent_name
        if is_visible is not None:
            self.is_visible = is_visible

    @property
    def subject_id(self):
        """Gets the subject_id of this InlineResponse2005Data.  # noqa: E501

        Identifikator predmeta  # noqa: E501

        :return: The subject_id of this InlineResponse2005Data.  # noqa: E501
        :rtype: int
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this InlineResponse2005Data.

        Identifikator predmeta  # noqa: E501

        :param subject_id: The subject_id of this InlineResponse2005Data.  # noqa: E501
        :type: int
        """

        self._subject_id = subject_id

    @property
    def parent_id(self):
        """Gets the parent_id of this InlineResponse2005Data.  # noqa: E501

        Identifikator roditelskoi kategorii  # noqa: E501

        :return: The parent_id of this InlineResponse2005Data.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this InlineResponse2005Data.

        Identifikator roditelskoi kategorii  # noqa: E501

        :param parent_id: The parent_id of this InlineResponse2005Data.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def subject_name(self):
        """Gets the subject_name of this InlineResponse2005Data.  # noqa: E501

        Nazvanie predmeta  # noqa: E501

        :return: The subject_name of this InlineResponse2005Data.  # noqa: E501
        :rtype: str
        """
        return self._subject_name

    @subject_name.setter
    def subject_name(self, subject_name):
        """Sets the subject_name of this InlineResponse2005Data.

        Nazvanie predmeta  # noqa: E501

        :param subject_name: The subject_name of this InlineResponse2005Data.  # noqa: E501
        :type: str
        """

        self._subject_name = subject_name

    @property
    def parent_name(self):
        """Gets the parent_name of this InlineResponse2005Data.  # noqa: E501

        Nazvanie roditelskoi kategorii  # noqa: E501

        :return: The parent_name of this InlineResponse2005Data.  # noqa: E501
        :rtype: str
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name):
        """Sets the parent_name of this InlineResponse2005Data.

        Nazvanie roditelskoi kategorii  # noqa: E501

        :param parent_name: The parent_name of this InlineResponse2005Data.  # noqa: E501
        :type: str
        """

        self._parent_name = parent_name

    @property
    def is_visible(self):
        """Gets the is_visible of this InlineResponse2005Data.  # noqa: E501

        Vidimost na saite  # noqa: E501

        :return: The is_visible of this InlineResponse2005Data.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this InlineResponse2005Data.

        Vidimost na saite  # noqa: E501

        :param is_visible: The is_visible of this InlineResponse2005Data.  # noqa: E501
        :type: bool
        """

        self._is_visible = is_visible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
