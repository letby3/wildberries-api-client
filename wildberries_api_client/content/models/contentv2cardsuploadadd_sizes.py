# coding: utf-8

"""
    Opisanie API Kontenta

     <dl> <dt>Slovar sokrahenii:</dt> <dd>KT — kartohka tovara</dd> <dd>NM—- nomenklatura</dd> </dl> Ogranihenia po kolihestvu zaprosov: <dd>Dopuskaetsa maksimum 100 zaprosov v minutu na metody kontenta v celom.</dd> <br> Publihnoe API Kontenta sozdano dla sinhronizacii dannyh mehdu serverami Wildberries i serverami prodavcov. <br> Vy zagruhaete dannye na svoi nositeli, rabotaete s nimi na svoih mohnostah i sinhroniziruetes s nahimi serverami po mere neobhodimosti. <br> <code>Ne dopuskaetsa ispolzovanie API Kontenta v kahestve vnehnei bazy dannyh. Pri prevyhenii limitov na zaprosy dostup k API budet ogranihen.</code> <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Contentv2cardsuploadaddSizes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tech_size': 'str',
        'wb_size': 'str',
        'price': 'int',
        'skus': 'list[str]'
    }

    attribute_map = {
        'tech_size': 'techSize',
        'wb_size': 'wbSize',
        'price': 'price',
        'skus': 'skus'
    }

    def __init__(self, tech_size=None, wb_size=None, price=None, skus=None):  # noqa: E501
        """Contentv2cardsuploadaddSizes - a model defined in Swagger"""  # noqa: E501
        self._tech_size = None
        self._wb_size = None
        self._price = None
        self._skus = None
        self.discriminator = None
        if tech_size is not None:
            self.tech_size = tech_size
        if wb_size is not None:
            self.wb_size = wb_size
        if price is not None:
            self.price = price
        if skus is not None:
            self.skus = skus

    @property
    def tech_size(self):
        """Gets the tech_size of this Contentv2cardsuploadaddSizes.  # noqa: E501

        Razmer tovara (XL, 42 i dr.)  # noqa: E501

        :return: The tech_size of this Contentv2cardsuploadaddSizes.  # noqa: E501
        :rtype: str
        """
        return self._tech_size

    @tech_size.setter
    def tech_size(self, tech_size):
        """Sets the tech_size of this Contentv2cardsuploadaddSizes.

        Razmer tovara (XL, 42 i dr.)  # noqa: E501

        :param tech_size: The tech_size of this Contentv2cardsuploadaddSizes.  # noqa: E501
        :type: str
        """

        self._tech_size = tech_size

    @property
    def wb_size(self):
        """Gets the wb_size of this Contentv2cardsuploadaddSizes.  # noqa: E501

        Rossiiskii razmer tovara  # noqa: E501

        :return: The wb_size of this Contentv2cardsuploadaddSizes.  # noqa: E501
        :rtype: str
        """
        return self._wb_size

    @wb_size.setter
    def wb_size(self, wb_size):
        """Sets the wb_size of this Contentv2cardsuploadaddSizes.

        Rossiiskii razmer tovara  # noqa: E501

        :param wb_size: The wb_size of this Contentv2cardsuploadaddSizes.  # noqa: E501
        :type: str
        """

        self._wb_size = wb_size

    @property
    def price(self):
        """Gets the price of this Contentv2cardsuploadaddSizes.  # noqa: E501

        cena tovara  # noqa: E501

        :return: The price of this Contentv2cardsuploadaddSizes.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Contentv2cardsuploadaddSizes.

        cena tovara  # noqa: E501

        :param price: The price of this Contentv2cardsuploadaddSizes.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def skus(self):
        """Gets the skus of this Contentv2cardsuploadaddSizes.  # noqa: E501

        Barkod  # noqa: E501

        :return: The skus of this Contentv2cardsuploadaddSizes.  # noqa: E501
        :rtype: list[str]
        """
        return self._skus

    @skus.setter
    def skus(self, skus):
        """Sets the skus of this Contentv2cardsuploadaddSizes.

        Barkod  # noqa: E501

        :param skus: The skus of this Contentv2cardsuploadaddSizes.  # noqa: E501
        :type: list[str]
        """

        self._skus = skus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Contentv2cardsuploadaddSizes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contentv2cardsuploadaddSizes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
