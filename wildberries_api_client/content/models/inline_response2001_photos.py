# coding: utf-8

"""
    Opisanie API Kontenta

     <dl> <dt>Slovar sokrahenii:</dt> <dd>KT — kartohka tovara</dd> <dd>NM—- nomenklatura</dd> </dl> Ogranihenia po kolihestvu zaprosov: <dd>Dopuskaetsa maksimum 100 zaprosov v minutu na metody kontenta v celom.</dd> <br> Publihnoe API Kontenta sozdano dla sinhronizacii dannyh mehdu serverami Wildberries i serverami prodavcov. <br> Vy zagruhaete dannye na svoi nositeli, rabotaete s nimi na svoih mohnostah i sinhroniziruetes s nahimi serverami po mere neobhodimosti. <br> <code>Ne dopuskaetsa ispolzovanie API Kontenta v kahestve vnehnei bazy dannyh. Pri prevyhenii limitov na zaprosy dostup k API budet ogranihen.</code> <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001Photos(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_516x288': 'str',
        'big': 'str',
        'small': 'str'
    }

    attribute_map = {
        '_516x288': '516x288',
        'big': 'big',
        'small': 'small'
    }

    def __init__(self, _516x288=None, big=None, small=None):  # noqa: E501
        """InlineResponse2001Photos - a model defined in Swagger"""  # noqa: E501
        self.__516x288 = None
        self._big = None
        self._small = None
        self.discriminator = None
        if _516x288 is not None:
            self._516x288 = _516x288
        if big is not None:
            self.big = big
        if small is not None:
            self.small = small

    @property
    def _516x288(self):
        """Gets the _516x288 of this InlineResponse2001Photos.  # noqa: E501

        Ne ispolzuetsa  # noqa: E501

        :return: The _516x288 of this InlineResponse2001Photos.  # noqa: E501
        :rtype: str
        """
        return self.__516x288

    @_516x288.setter
    def _516x288(self, _516x288):
        """Sets the _516x288 of this InlineResponse2001Photos.

        Ne ispolzuetsa  # noqa: E501

        :param _516x288: The _516x288 of this InlineResponse2001Photos.  # noqa: E501
        :type: str
        """

        self.__516x288 = _516x288

    @property
    def big(self):
        """Gets the big of this InlineResponse2001Photos.  # noqa: E501

        URL na foto v razrehenii 1200h900  # noqa: E501

        :return: The big of this InlineResponse2001Photos.  # noqa: E501
        :rtype: str
        """
        return self._big

    @big.setter
    def big(self, big):
        """Sets the big of this InlineResponse2001Photos.

        URL na foto v razrehenii 1200h900  # noqa: E501

        :param big: The big of this InlineResponse2001Photos.  # noqa: E501
        :type: str
        """

        self._big = big

    @property
    def small(self):
        """Gets the small of this InlineResponse2001Photos.  # noqa: E501

        Ne ispolzuetsa  # noqa: E501

        :return: The small of this InlineResponse2001Photos.  # noqa: E501
        :rtype: str
        """
        return self._small

    @small.setter
    def small(self, small):
        """Sets the small of this InlineResponse2001Photos.

        Ne ispolzuetsa  # noqa: E501

        :param small: The small of this InlineResponse2001Photos.  # noqa: E501
        :type: str
        """

        self._small = small

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001Photos, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001Photos):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
