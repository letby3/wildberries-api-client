# coding: utf-8

"""
    Opisanie API Kontenta

     <dl> <dt>Slovar sokrahenii:</dt> <dd>KT — kartohka tovara</dd> <dd>NM—- nomenklatura</dd> </dl> Ogranihenia po kolihestvu zaprosov: <dd>Dopuskaetsa maksimum 100 zaprosov v minutu na metody kontenta v celom.</dd> <br> Publihnoe API Kontenta sozdano dla sinhronizacii dannyh mehdu serverami Wildberries i serverami prodavcov. <br> Vy zagruhaete dannye na svoi nositeli, rabotaete s nimi na svoih mohnostah i sinhroniziruetes s nahimi serverami po mere neobhodimosti. <br> <code>Ne dopuskaetsa ispolzovanie API Kontenta v kahestve vnehnei bazy dannyh. Pri prevyhenii limitov na zaprosy dostup k API budet ogranihen.</code> <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001Cards(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nm_id': 'int',
        'imt_id': 'int',
        'subject_id': 'int',
        'vendor_code': 'str',
        'subject_name': 'str',
        'brand': 'str',
        'title': 'str',
        'photos': 'list[InlineResponse2001Photos]',
        'video': 'str',
        'dimensions': 'InlineResponse2001Dimensions',
        'characteristics': 'list[InlineResponse2001Characteristics]',
        'sizes': 'list[InlineResponse2001Sizes]',
        'tags': 'list[InlineResponse2001Tags]',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'nm_id': 'nmID',
        'imt_id': 'imtID',
        'subject_id': 'subjectID',
        'vendor_code': 'vendorCode',
        'subject_name': 'subjectName',
        'brand': 'brand',
        'title': 'title',
        'photos': 'photos',
        'video': 'video',
        'dimensions': 'dimensions',
        'characteristics': 'characteristics',
        'sizes': 'sizes',
        'tags': 'tags',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, nm_id=None, imt_id=None, subject_id=None, vendor_code=None, subject_name=None, brand=None, title=None, photos=None, video=None, dimensions=None, characteristics=None, sizes=None, tags=None, created_at=None, updated_at=None):  # noqa: E501
        """InlineResponse2001Cards - a model defined in Swagger"""  # noqa: E501
        self._nm_id = None
        self._imt_id = None
        self._subject_id = None
        self._vendor_code = None
        self._subject_name = None
        self._brand = None
        self._title = None
        self._photos = None
        self._video = None
        self._dimensions = None
        self._characteristics = None
        self._sizes = None
        self._tags = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if nm_id is not None:
            self.nm_id = nm_id
        if imt_id is not None:
            self.imt_id = imt_id
        if subject_id is not None:
            self.subject_id = subject_id
        if vendor_code is not None:
            self.vendor_code = vendor_code
        if subject_name is not None:
            self.subject_name = subject_name
        if brand is not None:
            self.brand = brand
        if title is not None:
            self.title = title
        if photos is not None:
            self.photos = photos
        if video is not None:
            self.video = video
        if dimensions is not None:
            self.dimensions = dimensions
        if characteristics is not None:
            self.characteristics = characteristics
        if sizes is not None:
            self.sizes = sizes
        if tags is not None:
            self.tags = tags
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def nm_id(self):
        """Gets the nm_id of this InlineResponse2001Cards.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this InlineResponse2001Cards.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this InlineResponse2001Cards.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this InlineResponse2001Cards.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def imt_id(self):
        """Gets the imt_id of this InlineResponse2001Cards.  # noqa: E501

        Identifikator KT. <br> Artikuly WB iz odnoi KT budut imet odinakovyi imtID.  # noqa: E501

        :return: The imt_id of this InlineResponse2001Cards.  # noqa: E501
        :rtype: int
        """
        return self._imt_id

    @imt_id.setter
    def imt_id(self, imt_id):
        """Sets the imt_id of this InlineResponse2001Cards.

        Identifikator KT. <br> Artikuly WB iz odnoi KT budut imet odinakovyi imtID.  # noqa: E501

        :param imt_id: The imt_id of this InlineResponse2001Cards.  # noqa: E501
        :type: int
        """

        self._imt_id = imt_id

    @property
    def subject_id(self):
        """Gets the subject_id of this InlineResponse2001Cards.  # noqa: E501

        Identifikator predmeta  # noqa: E501

        :return: The subject_id of this InlineResponse2001Cards.  # noqa: E501
        :rtype: int
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this InlineResponse2001Cards.

        Identifikator predmeta  # noqa: E501

        :param subject_id: The subject_id of this InlineResponse2001Cards.  # noqa: E501
        :type: int
        """

        self._subject_id = subject_id

    @property
    def vendor_code(self):
        """Gets the vendor_code of this InlineResponse2001Cards.  # noqa: E501

        Artikul prodavca  # noqa: E501

        :return: The vendor_code of this InlineResponse2001Cards.  # noqa: E501
        :rtype: str
        """
        return self._vendor_code

    @vendor_code.setter
    def vendor_code(self, vendor_code):
        """Sets the vendor_code of this InlineResponse2001Cards.

        Artikul prodavca  # noqa: E501

        :param vendor_code: The vendor_code of this InlineResponse2001Cards.  # noqa: E501
        :type: str
        """

        self._vendor_code = vendor_code

    @property
    def subject_name(self):
        """Gets the subject_name of this InlineResponse2001Cards.  # noqa: E501

        Nazvanie predmeta  # noqa: E501

        :return: The subject_name of this InlineResponse2001Cards.  # noqa: E501
        :rtype: str
        """
        return self._subject_name

    @subject_name.setter
    def subject_name(self, subject_name):
        """Sets the subject_name of this InlineResponse2001Cards.

        Nazvanie predmeta  # noqa: E501

        :param subject_name: The subject_name of this InlineResponse2001Cards.  # noqa: E501
        :type: str
        """

        self._subject_name = subject_name

    @property
    def brand(self):
        """Gets the brand of this InlineResponse2001Cards.  # noqa: E501

        Brend  # noqa: E501

        :return: The brand of this InlineResponse2001Cards.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this InlineResponse2001Cards.

        Brend  # noqa: E501

        :param brand: The brand of this InlineResponse2001Cards.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def title(self):
        """Gets the title of this InlineResponse2001Cards.  # noqa: E501

        Naimenovanie tovara  # noqa: E501

        :return: The title of this InlineResponse2001Cards.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse2001Cards.

        Naimenovanie tovara  # noqa: E501

        :param title: The title of this InlineResponse2001Cards.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def photos(self):
        """Gets the photos of this InlineResponse2001Cards.  # noqa: E501

        Massiv fotografii (pri nalihii)  # noqa: E501

        :return: The photos of this InlineResponse2001Cards.  # noqa: E501
        :rtype: list[InlineResponse2001Photos]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this InlineResponse2001Cards.

        Massiv fotografii (pri nalihii)  # noqa: E501

        :param photos: The photos of this InlineResponse2001Cards.  # noqa: E501
        :type: list[InlineResponse2001Photos]
        """

        self._photos = photos

    @property
    def video(self):
        """Gets the video of this InlineResponse2001Cards.  # noqa: E501

        URL video (pri nalihii)  # noqa: E501

        :return: The video of this InlineResponse2001Cards.  # noqa: E501
        :rtype: str
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this InlineResponse2001Cards.

        URL video (pri nalihii)  # noqa: E501

        :param video: The video of this InlineResponse2001Cards.  # noqa: E501
        :type: str
        """

        self._video = video

    @property
    def dimensions(self):
        """Gets the dimensions of this InlineResponse2001Cards.  # noqa: E501


        :return: The dimensions of this InlineResponse2001Cards.  # noqa: E501
        :rtype: InlineResponse2001Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this InlineResponse2001Cards.


        :param dimensions: The dimensions of this InlineResponse2001Cards.  # noqa: E501
        :type: InlineResponse2001Dimensions
        """

        self._dimensions = dimensions

    @property
    def characteristics(self):
        """Gets the characteristics of this InlineResponse2001Cards.  # noqa: E501

        harakteristiki  # noqa: E501

        :return: The characteristics of this InlineResponse2001Cards.  # noqa: E501
        :rtype: list[InlineResponse2001Characteristics]
        """
        return self._characteristics

    @characteristics.setter
    def characteristics(self, characteristics):
        """Sets the characteristics of this InlineResponse2001Cards.

        harakteristiki  # noqa: E501

        :param characteristics: The characteristics of this InlineResponse2001Cards.  # noqa: E501
        :type: list[InlineResponse2001Characteristics]
        """

        self._characteristics = characteristics

    @property
    def sizes(self):
        """Gets the sizes of this InlineResponse2001Cards.  # noqa: E501

        Razmery tovara  # noqa: E501

        :return: The sizes of this InlineResponse2001Cards.  # noqa: E501
        :rtype: list[InlineResponse2001Sizes]
        """
        return self._sizes

    @sizes.setter
    def sizes(self, sizes):
        """Sets the sizes of this InlineResponse2001Cards.

        Razmery tovara  # noqa: E501

        :param sizes: The sizes of this InlineResponse2001Cards.  # noqa: E501
        :type: list[InlineResponse2001Sizes]
        """

        self._sizes = sizes

    @property
    def tags(self):
        """Gets the tags of this InlineResponse2001Cards.  # noqa: E501

        Tegi  # noqa: E501

        :return: The tags of this InlineResponse2001Cards.  # noqa: E501
        :rtype: list[InlineResponse2001Tags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InlineResponse2001Cards.

        Tegi  # noqa: E501

        :param tags: The tags of this InlineResponse2001Cards.  # noqa: E501
        :type: list[InlineResponse2001Tags]
        """

        self._tags = tags

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse2001Cards.  # noqa: E501

        Data sozdania  # noqa: E501

        :return: The created_at of this InlineResponse2001Cards.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse2001Cards.

        Data sozdania  # noqa: E501

        :param created_at: The created_at of this InlineResponse2001Cards.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse2001Cards.  # noqa: E501

        Data izmenenia  # noqa: E501

        :return: The updated_at of this InlineResponse2001Cards.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse2001Cards.

        Data izmenenia  # noqa: E501

        :param updated_at: The updated_at of this InlineResponse2001Cards.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001Cards, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001Cards):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
