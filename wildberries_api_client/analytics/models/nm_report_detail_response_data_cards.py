# coding: utf-8

"""
    Opisanie API Analitika

    **Servis predostavlaet publihnyi API dla poluhenia analitiheskih dannyh.**          Analitiheskie dannye v istohnike hranatsa za poslednii god, pri vybore daty nahala perioda ranee hem god nazad, budet   vozvrahatsa ohibka, takim obrazom maksimalnoe kol-vo dnei v agregaciah â€” 365.  Takhe v dannyh, gde predostavlaetsa informacia po predyduhemu periodu:   1. V `previousPeriod` dannye za takoi he period, hto i v `selectedPeriod`.   2. Esli data nahala `previousPeriod` ranee, hem god nazad ot tekuhei daty, ona budet privedena k vidu:      `previousPeriod.start = tekuhaa data - 365 dnei.`  #### Taimzony  Format IANA, aktualnyi spisok mohno posmotret [zdes](https://nodatime.org/TimeZones). <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NmReportDetailResponseDataCards(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nm_id': 'int',
        'vendor_code': 'str',
        'brand_name': 'str',
        'tags': 'list[NmReportDetailResponseDataTags]',
        'object': 'NmReportDetailResponseDataObject',
        'statistics': 'NmReportDetailResponseDataStatistics',
        'stocks': 'NmReportDetailResponseDataStocks'
    }

    attribute_map = {
        'nm_id': 'nmID',
        'vendor_code': 'vendorCode',
        'brand_name': 'brandName',
        'tags': 'tags',
        'object': 'object',
        'statistics': 'statistics',
        'stocks': 'stocks'
    }

    def __init__(self, nm_id=None, vendor_code=None, brand_name=None, tags=None, object=None, statistics=None, stocks=None):  # noqa: E501
        """NmReportDetailResponseDataCards - a model defined in Swagger"""  # noqa: E501
        self._nm_id = None
        self._vendor_code = None
        self._brand_name = None
        self._tags = None
        self._object = None
        self._statistics = None
        self._stocks = None
        self.discriminator = None
        if nm_id is not None:
            self.nm_id = nm_id
        if vendor_code is not None:
            self.vendor_code = vendor_code
        if brand_name is not None:
            self.brand_name = brand_name
        if tags is not None:
            self.tags = tags
        if object is not None:
            self.object = object
        if statistics is not None:
            self.statistics = statistics
        if stocks is not None:
            self.stocks = stocks

    @property
    def nm_id(self):
        """Gets the nm_id of this NmReportDetailResponseDataCards.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this NmReportDetailResponseDataCards.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this NmReportDetailResponseDataCards.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this NmReportDetailResponseDataCards.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def vendor_code(self):
        """Gets the vendor_code of this NmReportDetailResponseDataCards.  # noqa: E501

        Artikul prodavca  # noqa: E501

        :return: The vendor_code of this NmReportDetailResponseDataCards.  # noqa: E501
        :rtype: str
        """
        return self._vendor_code

    @vendor_code.setter
    def vendor_code(self, vendor_code):
        """Sets the vendor_code of this NmReportDetailResponseDataCards.

        Artikul prodavca  # noqa: E501

        :param vendor_code: The vendor_code of this NmReportDetailResponseDataCards.  # noqa: E501
        :type: str
        """

        self._vendor_code = vendor_code

    @property
    def brand_name(self):
        """Gets the brand_name of this NmReportDetailResponseDataCards.  # noqa: E501

        Nazvanie brend  # noqa: E501

        :return: The brand_name of this NmReportDetailResponseDataCards.  # noqa: E501
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this NmReportDetailResponseDataCards.

        Nazvanie brend  # noqa: E501

        :param brand_name: The brand_name of this NmReportDetailResponseDataCards.  # noqa: E501
        :type: str
        """

        self._brand_name = brand_name

    @property
    def tags(self):
        """Gets the tags of this NmReportDetailResponseDataCards.  # noqa: E501

        Tegi  # noqa: E501

        :return: The tags of this NmReportDetailResponseDataCards.  # noqa: E501
        :rtype: list[NmReportDetailResponseDataTags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this NmReportDetailResponseDataCards.

        Tegi  # noqa: E501

        :param tags: The tags of this NmReportDetailResponseDataCards.  # noqa: E501
        :type: list[NmReportDetailResponseDataTags]
        """

        self._tags = tags

    @property
    def object(self):
        """Gets the object of this NmReportDetailResponseDataCards.  # noqa: E501


        :return: The object of this NmReportDetailResponseDataCards.  # noqa: E501
        :rtype: NmReportDetailResponseDataObject
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this NmReportDetailResponseDataCards.


        :param object: The object of this NmReportDetailResponseDataCards.  # noqa: E501
        :type: NmReportDetailResponseDataObject
        """

        self._object = object

    @property
    def statistics(self):
        """Gets the statistics of this NmReportDetailResponseDataCards.  # noqa: E501


        :return: The statistics of this NmReportDetailResponseDataCards.  # noqa: E501
        :rtype: NmReportDetailResponseDataStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this NmReportDetailResponseDataCards.


        :param statistics: The statistics of this NmReportDetailResponseDataCards.  # noqa: E501
        :type: NmReportDetailResponseDataStatistics
        """

        self._statistics = statistics

    @property
    def stocks(self):
        """Gets the stocks of this NmReportDetailResponseDataCards.  # noqa: E501


        :return: The stocks of this NmReportDetailResponseDataCards.  # noqa: E501
        :rtype: NmReportDetailResponseDataStocks
        """
        return self._stocks

    @stocks.setter
    def stocks(self, stocks):
        """Sets the stocks of this NmReportDetailResponseDataCards.


        :param stocks: The stocks of this NmReportDetailResponseDataCards.  # noqa: E501
        :type: NmReportDetailResponseDataStocks
        """

        self._stocks = stocks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NmReportDetailResponseDataCards, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NmReportDetailResponseDataCards):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
