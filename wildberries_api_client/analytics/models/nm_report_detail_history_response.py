# coding: utf-8

"""
    Opisanie API Analitika

    **Servis predostavlaet publihnyi API dla poluhenia analitiheskih dannyh.**          Analitiheskie dannye v istohnike hranatsa za poslednii god, pri vybore daty nahala perioda ranee hem god nazad, budet   vozvrahatsa ohibka, takim obrazom maksimalnoe kol-vo dnei v agregaciah â€” 365.  Takhe v dannyh, gde predostavlaetsa informacia po predyduhemu periodu:   1. V `previousPeriod` dannye za takoi he period, hto i v `selectedPeriod`.   2. Esli data nahala `previousPeriod` ranee, hem god nazad ot tekuhei daty, ona budet privedena k vidu:      `previousPeriod.start = tekuhaa data - 365 dnei.`  #### Taimzony  Format IANA, aktualnyi spisok mohno posmotret [zdes](https://nodatime.org/TimeZones). <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NmReportDetailHistoryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'list[NmReportDetailHistoryResponseData]',
        'error': 'bool',
        'error_text': 'str',
        'additional_errors': 'list[ResponseErrorAdditionalErrors]'
    }

    attribute_map = {
        'data': 'data',
        'error': 'error',
        'error_text': 'errorText',
        'additional_errors': 'additionalErrors'
    }

    def __init__(self, data=None, error=None, error_text=None, additional_errors=None):  # noqa: E501
        """NmReportDetailHistoryResponse - a model defined in Swagger"""  # noqa: E501
        self._data = None
        self._error = None
        self._error_text = None
        self._additional_errors = None
        self.discriminator = None
        if data is not None:
            self.data = data
        if error is not None:
            self.error = error
        if error_text is not None:
            self.error_text = error_text
        if additional_errors is not None:
            self.additional_errors = additional_errors

    @property
    def data(self):
        """Gets the data of this NmReportDetailHistoryResponse.  # noqa: E501


        :return: The data of this NmReportDetailHistoryResponse.  # noqa: E501
        :rtype: list[NmReportDetailHistoryResponseData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this NmReportDetailHistoryResponse.


        :param data: The data of this NmReportDetailHistoryResponse.  # noqa: E501
        :type: list[NmReportDetailHistoryResponseData]
        """

        self._data = data

    @property
    def error(self):
        """Gets the error of this NmReportDetailHistoryResponse.  # noqa: E501

        Flag ohibki  # noqa: E501

        :return: The error of this NmReportDetailHistoryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this NmReportDetailHistoryResponse.

        Flag ohibki  # noqa: E501

        :param error: The error of this NmReportDetailHistoryResponse.  # noqa: E501
        :type: bool
        """

        self._error = error

    @property
    def error_text(self):
        """Gets the error_text of this NmReportDetailHistoryResponse.  # noqa: E501

        Opisanie ohibki  # noqa: E501

        :return: The error_text of this NmReportDetailHistoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_text

    @error_text.setter
    def error_text(self, error_text):
        """Sets the error_text of this NmReportDetailHistoryResponse.

        Opisanie ohibki  # noqa: E501

        :param error_text: The error_text of this NmReportDetailHistoryResponse.  # noqa: E501
        :type: str
        """

        self._error_text = error_text

    @property
    def additional_errors(self):
        """Gets the additional_errors of this NmReportDetailHistoryResponse.  # noqa: E501

        Dopolnitelnye ohibki  # noqa: E501

        :return: The additional_errors of this NmReportDetailHistoryResponse.  # noqa: E501
        :rtype: list[ResponseErrorAdditionalErrors]
        """
        return self._additional_errors

    @additional_errors.setter
    def additional_errors(self, additional_errors):
        """Sets the additional_errors of this NmReportDetailHistoryResponse.

        Dopolnitelnye ohibki  # noqa: E501

        :param additional_errors: The additional_errors of this NmReportDetailHistoryResponse.  # noqa: E501
        :type: list[ResponseErrorAdditionalErrors]
        """

        self._additional_errors = additional_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NmReportDetailHistoryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NmReportDetailHistoryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
