# coding: utf-8

"""
    Opisanie API Analitika

    **Servis predostavlaet publihnyi API dla poluhenia analitiheskih dannyh.**          Analitiheskie dannye v istohnike hranatsa za poslednii god, pri vybore daty nahala perioda ranee hem god nazad, budet   vozvrahatsa ohibka, takim obrazom maksimalnoe kol-vo dnei v agregaciah — 365.  Takhe v dannyh, gde predostavlaetsa informacia po predyduhemu periodu:   1. V `previousPeriod` dannye za takoi he period, hto i v `selectedPeriod`.   2. Esli data nahala `previousPeriod` ranee, hem god nazad ot tekuhei daty, ona budet privedena k vidu:      `previousPeriod.start = tekuhaa data - 365 dnei.`  #### Taimzony  Format IANA, aktualnyi spisok mohno posmotret [zdes](https://nodatime.org/TimeZones). <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelsExciseReportResponseDataInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'price': 'float',
        'currency_name_short': 'str',
        'excise_short': 'str',
        'barcode': 'str',
        'nm_id': 'int',
        'operation_type_id': 'int',
        'fiscal_doc_number': 'int',
        'fiscal_dt': 'str',
        'fiscal_drive_number': 'str',
        'rid': 'int',
        'srid': 'str'
    }

    attribute_map = {
        'name': 'name',
        'price': 'price',
        'currency_name_short': 'currency_name_short',
        'excise_short': 'excise_short',
        'barcode': 'barcode',
        'nm_id': 'nm_id',
        'operation_type_id': 'operation_type_id',
        'fiscal_doc_number': 'fiscal_doc_number',
        'fiscal_dt': 'fiscal_dt',
        'fiscal_drive_number': 'fiscal_drive_number',
        'rid': 'rid',
        'srid': 'srid'
    }

    def __init__(self, name=None, price=None, currency_name_short=None, excise_short=None, barcode=None, nm_id=None, operation_type_id=None, fiscal_doc_number=None, fiscal_dt=None, fiscal_drive_number=None, rid=None, srid=None):  # noqa: E501
        """ModelsExciseReportResponseDataInner - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._price = None
        self._currency_name_short = None
        self._excise_short = None
        self._barcode = None
        self._nm_id = None
        self._operation_type_id = None
        self._fiscal_doc_number = None
        self._fiscal_dt = None
        self._fiscal_drive_number = None
        self._rid = None
        self._srid = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if price is not None:
            self.price = price
        if currency_name_short is not None:
            self.currency_name_short = currency_name_short
        if excise_short is not None:
            self.excise_short = excise_short
        if barcode is not None:
            self.barcode = barcode
        if nm_id is not None:
            self.nm_id = nm_id
        if operation_type_id is not None:
            self.operation_type_id = operation_type_id
        if fiscal_doc_number is not None:
            self.fiscal_doc_number = fiscal_doc_number
        if fiscal_dt is not None:
            self.fiscal_dt = fiscal_dt
        if fiscal_drive_number is not None:
            self.fiscal_drive_number = fiscal_drive_number
        if rid is not None:
            self.rid = rid
        if srid is not None:
            self.srid = srid

    @property
    def name(self):
        """Gets the name of this ModelsExciseReportResponseDataInner.  # noqa: E501

        Strana pokupatela  # noqa: E501

        :return: The name of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsExciseReportResponseDataInner.

        Strana pokupatela  # noqa: E501

        :param name: The name of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this ModelsExciseReportResponseDataInner.  # noqa: E501

        cena tovara, s NDS  # noqa: E501

        :return: The price of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ModelsExciseReportResponseDataInner.

        cena tovara, s NDS  # noqa: E501

        :param price: The price of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def currency_name_short(self):
        """Gets the currency_name_short of this ModelsExciseReportResponseDataInner.  # noqa: E501

        Valuta  # noqa: E501

        :return: The currency_name_short of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :rtype: str
        """
        return self._currency_name_short

    @currency_name_short.setter
    def currency_name_short(self, currency_name_short):
        """Sets the currency_name_short of this ModelsExciseReportResponseDataInner.

        Valuta  # noqa: E501

        :param currency_name_short: The currency_name_short of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :type: str
        """

        self._currency_name_short = currency_name_short

    @property
    def excise_short(self):
        """Gets the excise_short of this ModelsExciseReportResponseDataInner.  # noqa: E501

        Kod markirovki  # noqa: E501

        :return: The excise_short of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :rtype: str
        """
        return self._excise_short

    @excise_short.setter
    def excise_short(self, excise_short):
        """Sets the excise_short of this ModelsExciseReportResponseDataInner.

        Kod markirovki  # noqa: E501

        :param excise_short: The excise_short of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :type: str
        """

        self._excise_short = excise_short

    @property
    def barcode(self):
        """Gets the barcode of this ModelsExciseReportResponseDataInner.  # noqa: E501

        Barkod  # noqa: E501

        :return: The barcode of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ModelsExciseReportResponseDataInner.

        Barkod  # noqa: E501

        :param barcode: The barcode of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def nm_id(self):
        """Gets the nm_id of this ModelsExciseReportResponseDataInner.  # noqa: E501

        Artikul Wildberries  # noqa: E501

        :return: The nm_id of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this ModelsExciseReportResponseDataInner.

        Artikul Wildberries  # noqa: E501

        :param nm_id: The nm_id of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def operation_type_id(self):
        """Gets the operation_type_id of this ModelsExciseReportResponseDataInner.  # noqa: E501

        Tip operacii, esli est:    * `1` — vyvod iz oborota   * `2` — vozvrat v oborot   # noqa: E501

        :return: The operation_type_id of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :rtype: int
        """
        return self._operation_type_id

    @operation_type_id.setter
    def operation_type_id(self, operation_type_id):
        """Sets the operation_type_id of this ModelsExciseReportResponseDataInner.

        Tip operacii, esli est:    * `1` — vyvod iz oborota   * `2` — vozvrat v oborot   # noqa: E501

        :param operation_type_id: The operation_type_id of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :type: int
        """

        self._operation_type_id = operation_type_id

    @property
    def fiscal_doc_number(self):
        """Gets the fiscal_doc_number of this ModelsExciseReportResponseDataInner.  # noqa: E501

        Nomer fiskalnogo dokumenta (heka polnogo rasheta), esli est   # noqa: E501

        :return: The fiscal_doc_number of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :rtype: int
        """
        return self._fiscal_doc_number

    @fiscal_doc_number.setter
    def fiscal_doc_number(self, fiscal_doc_number):
        """Sets the fiscal_doc_number of this ModelsExciseReportResponseDataInner.

        Nomer fiskalnogo dokumenta (heka polnogo rasheta), esli est   # noqa: E501

        :param fiscal_doc_number: The fiscal_doc_number of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :type: int
        """

        self._fiscal_doc_number = fiscal_doc_number

    @property
    def fiscal_dt(self):
        """Gets the fiscal_dt of this ModelsExciseReportResponseDataInner.  # noqa: E501

        Data fiskalizacii (data v heke), esli est, GGGG-MM-DD  # noqa: E501

        :return: The fiscal_dt of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :rtype: str
        """
        return self._fiscal_dt

    @fiscal_dt.setter
    def fiscal_dt(self, fiscal_dt):
        """Sets the fiscal_dt of this ModelsExciseReportResponseDataInner.

        Data fiskalizacii (data v heke), esli est, GGGG-MM-DD  # noqa: E501

        :param fiscal_dt: The fiscal_dt of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :type: str
        """

        self._fiscal_dt = fiscal_dt

    @property
    def fiscal_drive_number(self):
        """Gets the fiscal_drive_number of this ModelsExciseReportResponseDataInner.  # noqa: E501

        Nomer fiskalnogo nakopitela, esli est   # noqa: E501

        :return: The fiscal_drive_number of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :rtype: str
        """
        return self._fiscal_drive_number

    @fiscal_drive_number.setter
    def fiscal_drive_number(self, fiscal_drive_number):
        """Sets the fiscal_drive_number of this ModelsExciseReportResponseDataInner.

        Nomer fiskalnogo nakopitela, esli est   # noqa: E501

        :param fiscal_drive_number: The fiscal_drive_number of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :type: str
        """

        self._fiscal_drive_number = fiscal_drive_number

    @property
    def rid(self):
        """Gets the rid of this ModelsExciseReportResponseDataInner.  # noqa: E501

        `Rid`   # noqa: E501

        :return: The rid of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :rtype: int
        """
        return self._rid

    @rid.setter
    def rid(self, rid):
        """Sets the rid of this ModelsExciseReportResponseDataInner.

        `Rid`   # noqa: E501

        :param rid: The rid of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :type: int
        """

        self._rid = rid

    @property
    def srid(self):
        """Gets the srid of this ModelsExciseReportResponseDataInner.  # noqa: E501

        `Srid`   # noqa: E501

        :return: The srid of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :rtype: str
        """
        return self._srid

    @srid.setter
    def srid(self, srid):
        """Sets the srid of this ModelsExciseReportResponseDataInner.

        `Srid`   # noqa: E501

        :param srid: The srid of this ModelsExciseReportResponseDataInner.  # noqa: E501
        :type: str
        """

        self._srid = srid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsExciseReportResponseDataInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsExciseReportResponseDataInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
