# coding: utf-8

"""
    Opisanie API Rekomendacii

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.recommendations.api_client import ApiClient


class RekomendaciiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_del_post(self, body, **kwargs):  # noqa: E501
        """Udalenie rekomendacii  # noqa: E501

        Metod pozvolaet udalit rekomendacii. <br> `VAhNO!` Esli zapros prohel uspehno (kod otveta 200), a rekomendacii ne udalilis, to Vam neobhodimo proverit korrektnost otpravlennyh znahenii. Na dannyi moment v metode ne predusmotrena validacia znahenii parametrov. Thatelno proveraite dannye pered otpravkoi.<br> <br> `VAhNO`: Esli Vy poluhili otvet s kodom 200 i telom vida <b>CrutchSapi1356-65c49a25-7f9798142620 OK</b>, znahit minimum odna iz peredannyh nomenklatur ne prinadlehit Vam, libo ne suhestvuet.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_del_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[V1DelBody] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_del_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_del_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_del_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Udalenie rekomendacii  # noqa: E501

        Metod pozvolaet udalit rekomendacii. <br> `VAhNO!` Esli zapros prohel uspehno (kod otveta 200), a rekomendacii ne udalilis, to Vam neobhodimo proverit korrektnost otpravlennyh znahenii. Na dannyi moment v metode ne predusmotrena validacia znahenii parametrov. Thatelno proveraite dannye pered otpravkoi.<br> <br> `VAhNO`: Esli Vy poluhili otvet s kodom 200 i telom vida <b>CrutchSapi1356-65c49a25-7f9798142620 OK</b>, znahit minimum odna iz peredannyh nomenklatur ne prinadlehit Vam, libo ne suhestvuet.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_del_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[V1DelBody] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_del_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_del_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/del', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_ins_post(self, body, **kwargs):  # noqa: E501
        """Dobavlenie rekomendacii  # noqa: E501

        Metod pozvolaet dobavit rekomendacii k tovaru. <br> `VAhNO!` Esli zapros prohel uspehno (kod otveta 200), a rekomendacii ne dobavilas, to Vam neobhodimo proverit korrektnost otpravlennyh znahenii.  <br>Na dannyi moment v metode ne predusmotrena validacia znahenii parametrov.  <br>Thatelno proveraite dannye pered otpravkoi. <br>Ogranihenie po zaprosam: 120 zaprosov v minutu. <br> <br>`VAhNO!` Esli Vy poluhili otvet s kodom 200 i telom vida <b>CrutchSapi1356-65c49a25-7f9798142620 OK</b>, znahit minimum odna iz peredannyh nomenklatur ne prinadlehit Vam, libo ne suhestvuet.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_ins_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[V1InsBody] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_ins_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_ins_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_ins_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Dobavlenie rekomendacii  # noqa: E501

        Metod pozvolaet dobavit rekomendacii k tovaru. <br> `VAhNO!` Esli zapros prohel uspehno (kod otveta 200), a rekomendacii ne dobavilas, to Vam neobhodimo proverit korrektnost otpravlennyh znahenii.  <br>Na dannyi moment v metode ne predusmotrena validacia znahenii parametrov.  <br>Thatelno proveraite dannye pered otpravkoi. <br>Ogranihenie po zaprosam: 120 zaprosov v minutu. <br> <br>`VAhNO!` Esli Vy poluhili otvet s kodom 200 i telom vida <b>CrutchSapi1356-65c49a25-7f9798142620 OK</b>, znahit minimum odna iz peredannyh nomenklatur ne prinadlehit Vam, libo ne suhestvuet.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_ins_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[V1InsBody] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_ins_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_ins_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/ins', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_list_post(self, body, **kwargs):  # noqa: E501
        """Spisok rekomendacii  # noqa: E501

        Metod pozvolaet poluhit spisok rekomendacii po neskolkim tovaram. <br> <br> `VAhNO`: Esli Vy poluhili ohibku s kodom 200 i soobheniem vida <b>CrutchSapi1356-65c49a25-7f9798142620-UKfmVPyPcik6d OK</b>, znahit minimum odna iz peredannyh nomenklatur ne prinadlehit Vam, libo ne suhestvuet.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_list_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: (required)
        :param int limit: Ogranihenie kolihestva rekomendacii v otvete.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_list_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_list_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_list_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Spisok rekomendacii  # noqa: E501

        Metod pozvolaet poluhit spisok rekomendacii po neskolkim tovaram. <br> <br> `VAhNO`: Esli Vy poluhili ohibku s kodom 200 i soobheniem vida <b>CrutchSapi1356-65c49a25-7f9798142620-UKfmVPyPcik6d OK</b>, znahit minimum odna iz peredannyh nomenklatur ne prinadlehit Vam, libo ne suhestvuet.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_list_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: (required)
        :param int limit: Ogranihenie kolihestva rekomendacii v otvete.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_list_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_list_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'limit' in params:
            header_params['limit'] = params['limit']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_set_post(self, body, **kwargs):  # noqa: E501
        """Upravlenie rekomendaciami  # noqa: E501

        Metod pozvolaet dobavlat, udalat rekomendacii.<br> Rabotaet po principu perezapisi, vse hto ukazano v recom, stavitsa vzamen togo, hto bylo ranee.<br> htoby udalit rekomendacii neobhodimo peredat pustoi massiv recom.<br> <br> `VAhNO`: Esli Vy poluhili otvet s kodom 200 i telom vida <b>CrutchSapi1356-65c49a25-7f9798142620 OK</b>, znahit minimum odna iz peredannyh nomenklatur ne prinadlehit Vam, libo ne suhestvuet.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_set_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[V1SetBody] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_set_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_set_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_set_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Upravlenie rekomendaciami  # noqa: E501

        Metod pozvolaet dobavlat, udalat rekomendacii.<br> Rabotaet po principu perezapisi, vse hto ukazano v recom, stavitsa vzamen togo, hto bylo ranee.<br> htoby udalit rekomendacii neobhodimo peredat pustoi massiv recom.<br> <br> `VAhNO`: Esli Vy poluhili otvet s kodom 200 i telom vida <b>CrutchSapi1356-65c49a25-7f9798142620 OK</b>, znahit minimum odna iz peredannyh nomenklatur ne prinadlehit Vam, libo ne suhestvuet.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_set_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[V1SetBody] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_set_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_set_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
