# coding: utf-8

"""
    Opisanie API Statistiki

    S pomohu etih metodov mohno poluhit othety.   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StocksItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_change_date': 'datetime',
        'warehouse_name': 'str',
        'supplier_article': 'str',
        'nm_id': 'int',
        'barcode': 'str',
        'quantity': 'int',
        'in_way_to_client': 'int',
        'in_way_from_client': 'int',
        'quantity_full': 'int',
        'category': 'str',
        'subject': 'str',
        'brand': 'str',
        'tech_size': 'str',
        'price': 'float',
        'discount': 'float',
        'is_supply': 'bool',
        'is_realization': 'bool',
        'sc_code': 'str'
    }

    attribute_map = {
        'last_change_date': 'lastChangeDate',
        'warehouse_name': 'warehouseName',
        'supplier_article': 'supplierArticle',
        'nm_id': 'nmId',
        'barcode': 'barcode',
        'quantity': 'quantity',
        'in_way_to_client': 'inWayToClient',
        'in_way_from_client': 'inWayFromClient',
        'quantity_full': 'quantityFull',
        'category': 'category',
        'subject': 'subject',
        'brand': 'brand',
        'tech_size': 'techSize',
        'price': 'Price',
        'discount': 'Discount',
        'is_supply': 'isSupply',
        'is_realization': 'isRealization',
        'sc_code': 'SCCode'
    }

    def __init__(self, last_change_date=None, warehouse_name=None, supplier_article=None, nm_id=None, barcode=None, quantity=None, in_way_to_client=None, in_way_from_client=None, quantity_full=None, category=None, subject=None, brand=None, tech_size=None, price=None, discount=None, is_supply=None, is_realization=None, sc_code=None):  # noqa: E501
        """StocksItem - a model defined in Swagger"""  # noqa: E501
        self._last_change_date = None
        self._warehouse_name = None
        self._supplier_article = None
        self._nm_id = None
        self._barcode = None
        self._quantity = None
        self._in_way_to_client = None
        self._in_way_from_client = None
        self._quantity_full = None
        self._category = None
        self._subject = None
        self._brand = None
        self._tech_size = None
        self._price = None
        self._discount = None
        self._is_supply = None
        self._is_realization = None
        self._sc_code = None
        self.discriminator = None
        if last_change_date is not None:
            self.last_change_date = last_change_date
        if warehouse_name is not None:
            self.warehouse_name = warehouse_name
        if supplier_article is not None:
            self.supplier_article = supplier_article
        if nm_id is not None:
            self.nm_id = nm_id
        if barcode is not None:
            self.barcode = barcode
        if quantity is not None:
            self.quantity = quantity
        if in_way_to_client is not None:
            self.in_way_to_client = in_way_to_client
        if in_way_from_client is not None:
            self.in_way_from_client = in_way_from_client
        if quantity_full is not None:
            self.quantity_full = quantity_full
        if category is not None:
            self.category = category
        if subject is not None:
            self.subject = subject
        if brand is not None:
            self.brand = brand
        if tech_size is not None:
            self.tech_size = tech_size
        if price is not None:
            self.price = price
        if discount is not None:
            self.discount = discount
        if is_supply is not None:
            self.is_supply = is_supply
        if is_realization is not None:
            self.is_realization = is_realization
        if sc_code is not None:
            self.sc_code = sc_code

    @property
    def last_change_date(self):
        """Gets the last_change_date of this StocksItem.  # noqa: E501

        Data i vrema obnovlenia informacii v servise. Eto pole sootvetstvuet parametru `dateFrom` v zaprose. Esli hasovoi poas ne ukazan, to beretsa Moskovskoe vrema (UTC+3).  # noqa: E501

        :return: The last_change_date of this StocksItem.  # noqa: E501
        :rtype: datetime
        """
        return self._last_change_date

    @last_change_date.setter
    def last_change_date(self, last_change_date):
        """Sets the last_change_date of this StocksItem.

        Data i vrema obnovlenia informacii v servise. Eto pole sootvetstvuet parametru `dateFrom` v zaprose. Esli hasovoi poas ne ukazan, to beretsa Moskovskoe vrema (UTC+3).  # noqa: E501

        :param last_change_date: The last_change_date of this StocksItem.  # noqa: E501
        :type: datetime
        """

        self._last_change_date = last_change_date

    @property
    def warehouse_name(self):
        """Gets the warehouse_name of this StocksItem.  # noqa: E501

        Nazvanie sklada  # noqa: E501

        :return: The warehouse_name of this StocksItem.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_name

    @warehouse_name.setter
    def warehouse_name(self, warehouse_name):
        """Sets the warehouse_name of this StocksItem.

        Nazvanie sklada  # noqa: E501

        :param warehouse_name: The warehouse_name of this StocksItem.  # noqa: E501
        :type: str
        """

        self._warehouse_name = warehouse_name

    @property
    def supplier_article(self):
        """Gets the supplier_article of this StocksItem.  # noqa: E501

        Artikul prodavca  # noqa: E501

        :return: The supplier_article of this StocksItem.  # noqa: E501
        :rtype: str
        """
        return self._supplier_article

    @supplier_article.setter
    def supplier_article(self, supplier_article):
        """Sets the supplier_article of this StocksItem.

        Artikul prodavca  # noqa: E501

        :param supplier_article: The supplier_article of this StocksItem.  # noqa: E501
        :type: str
        """

        self._supplier_article = supplier_article

    @property
    def nm_id(self):
        """Gets the nm_id of this StocksItem.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this StocksItem.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this StocksItem.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this StocksItem.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def barcode(self):
        """Gets the barcode of this StocksItem.  # noqa: E501

        Barkod  # noqa: E501

        :return: The barcode of this StocksItem.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this StocksItem.

        Barkod  # noqa: E501

        :param barcode: The barcode of this StocksItem.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def quantity(self):
        """Gets the quantity of this StocksItem.  # noqa: E501

        Kolihestvo, dostupnoe dla prodahi (skolko mohno dobavit v korzinu)  # noqa: E501

        :return: The quantity of this StocksItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this StocksItem.

        Kolihestvo, dostupnoe dla prodahi (skolko mohno dobavit v korzinu)  # noqa: E501

        :param quantity: The quantity of this StocksItem.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def in_way_to_client(self):
        """Gets the in_way_to_client of this StocksItem.  # noqa: E501

        V puti k klientu  # noqa: E501

        :return: The in_way_to_client of this StocksItem.  # noqa: E501
        :rtype: int
        """
        return self._in_way_to_client

    @in_way_to_client.setter
    def in_way_to_client(self, in_way_to_client):
        """Sets the in_way_to_client of this StocksItem.

        V puti k klientu  # noqa: E501

        :param in_way_to_client: The in_way_to_client of this StocksItem.  # noqa: E501
        :type: int
        """

        self._in_way_to_client = in_way_to_client

    @property
    def in_way_from_client(self):
        """Gets the in_way_from_client of this StocksItem.  # noqa: E501

        V puti ot klienta  # noqa: E501

        :return: The in_way_from_client of this StocksItem.  # noqa: E501
        :rtype: int
        """
        return self._in_way_from_client

    @in_way_from_client.setter
    def in_way_from_client(self, in_way_from_client):
        """Sets the in_way_from_client of this StocksItem.

        V puti ot klienta  # noqa: E501

        :param in_way_from_client: The in_way_from_client of this StocksItem.  # noqa: E501
        :type: int
        """

        self._in_way_from_client = in_way_from_client

    @property
    def quantity_full(self):
        """Gets the quantity_full of this StocksItem.  # noqa: E501

        Polnoe (neprodannoe) kolihestvo, kotoroe hislitsa za skladom (= `quantity` + v puti)  # noqa: E501

        :return: The quantity_full of this StocksItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity_full

    @quantity_full.setter
    def quantity_full(self, quantity_full):
        """Sets the quantity_full of this StocksItem.

        Polnoe (neprodannoe) kolihestvo, kotoroe hislitsa za skladom (= `quantity` + v puti)  # noqa: E501

        :param quantity_full: The quantity_full of this StocksItem.  # noqa: E501
        :type: int
        """

        self._quantity_full = quantity_full

    @property
    def category(self):
        """Gets the category of this StocksItem.  # noqa: E501

        Kategoria  # noqa: E501

        :return: The category of this StocksItem.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this StocksItem.

        Kategoria  # noqa: E501

        :param category: The category of this StocksItem.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def subject(self):
        """Gets the subject of this StocksItem.  # noqa: E501

        Predmet  # noqa: E501

        :return: The subject of this StocksItem.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this StocksItem.

        Predmet  # noqa: E501

        :param subject: The subject of this StocksItem.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def brand(self):
        """Gets the brand of this StocksItem.  # noqa: E501

        Brend  # noqa: E501

        :return: The brand of this StocksItem.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this StocksItem.

        Brend  # noqa: E501

        :param brand: The brand of this StocksItem.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def tech_size(self):
        """Gets the tech_size of this StocksItem.  # noqa: E501

        Razmer  # noqa: E501

        :return: The tech_size of this StocksItem.  # noqa: E501
        :rtype: str
        """
        return self._tech_size

    @tech_size.setter
    def tech_size(self, tech_size):
        """Sets the tech_size of this StocksItem.

        Razmer  # noqa: E501

        :param tech_size: The tech_size of this StocksItem.  # noqa: E501
        :type: str
        """

        self._tech_size = tech_size

    @property
    def price(self):
        """Gets the price of this StocksItem.  # noqa: E501

        cena  # noqa: E501

        :return: The price of this StocksItem.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this StocksItem.

        cena  # noqa: E501

        :param price: The price of this StocksItem.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def discount(self):
        """Gets the discount of this StocksItem.  # noqa: E501

        Skidka  # noqa: E501

        :return: The discount of this StocksItem.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this StocksItem.

        Skidka  # noqa: E501

        :param discount: The discount of this StocksItem.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def is_supply(self):
        """Gets the is_supply of this StocksItem.  # noqa: E501

        Dogovor postavki (vnutrennie tehnologiheskie dannye)  # noqa: E501

        :return: The is_supply of this StocksItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_supply

    @is_supply.setter
    def is_supply(self, is_supply):
        """Sets the is_supply of this StocksItem.

        Dogovor postavki (vnutrennie tehnologiheskie dannye)  # noqa: E501

        :param is_supply: The is_supply of this StocksItem.  # noqa: E501
        :type: bool
        """

        self._is_supply = is_supply

    @property
    def is_realization(self):
        """Gets the is_realization of this StocksItem.  # noqa: E501

        Dogovor realizacii (vnutrennie tehnologiheskie dannye)  # noqa: E501

        :return: The is_realization of this StocksItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_realization

    @is_realization.setter
    def is_realization(self, is_realization):
        """Sets the is_realization of this StocksItem.

        Dogovor realizacii (vnutrennie tehnologiheskie dannye)  # noqa: E501

        :param is_realization: The is_realization of this StocksItem.  # noqa: E501
        :type: bool
        """

        self._is_realization = is_realization

    @property
    def sc_code(self):
        """Gets the sc_code of this StocksItem.  # noqa: E501

        Kod kontrakta (vnutrennie tehnologiheskie dannye)  # noqa: E501

        :return: The sc_code of this StocksItem.  # noqa: E501
        :rtype: str
        """
        return self._sc_code

    @sc_code.setter
    def sc_code(self, sc_code):
        """Sets the sc_code of this StocksItem.

        Kod kontrakta (vnutrennie tehnologiheskie dannye)  # noqa: E501

        :param sc_code: The sc_code of this StocksItem.  # noqa: E501
        :type: str
        """

        self._sc_code = sc_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StocksItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StocksItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
