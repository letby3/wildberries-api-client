# coding: utf-8

"""
    Opisanie API Statistiki

    S pomohu etih metodov mohno poluhit othety.   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateTaskRequestPaidStorageParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_from': 'date',
        'date_to': 'date',
        'diviser': 'int',
        'remainder': 'int'
    }

    attribute_map = {
        'date_from': 'dateFrom',
        'date_to': 'dateTo',
        'diviser': 'diviser',
        'remainder': 'remainder'
    }

    def __init__(self, date_from=None, date_to=None, diviser=None, remainder=None):  # noqa: E501
        """CreateTaskRequestPaidStorageParams - a model defined in Swagger"""  # noqa: E501
        self._date_from = None
        self._date_to = None
        self._diviser = None
        self._remainder = None
        self.discriminator = None
        if date_from is not None:
            self.date_from = date_from
        if date_to is not None:
            self.date_to = date_to
        if diviser is not None:
            self.diviser = diviser
        if remainder is not None:
            self.remainder = remainder

    @property
    def date_from(self):
        """Gets the date_from of this CreateTaskRequestPaidStorageParams.  # noqa: E501

        Data nahala zaprahivaemogo perioda  # noqa: E501

        :return: The date_from of this CreateTaskRequestPaidStorageParams.  # noqa: E501
        :rtype: date
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this CreateTaskRequestPaidStorageParams.

        Data nahala zaprahivaemogo perioda  # noqa: E501

        :param date_from: The date_from of this CreateTaskRequestPaidStorageParams.  # noqa: E501
        :type: date
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this CreateTaskRequestPaidStorageParams.  # noqa: E501

        Data konca zaprahivaemogo perioda  # noqa: E501

        :return: The date_to of this CreateTaskRequestPaidStorageParams.  # noqa: E501
        :rtype: date
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this CreateTaskRequestPaidStorageParams.

        Data konca zaprahivaemogo perioda  # noqa: E501

        :param date_to: The date_to of this CreateTaskRequestPaidStorageParams.  # noqa: E501
        :type: date
        """

        self._date_to = date_to

    @property
    def diviser(self):
        """Gets the diviser of this CreateTaskRequestPaidStorageParams.  # noqa: E501

        Kolihestvo hastei, na kotoroe neobhodimo razdelit zaprohennyi othet.  # noqa: E501

        :return: The diviser of this CreateTaskRequestPaidStorageParams.  # noqa: E501
        :rtype: int
        """
        return self._diviser

    @diviser.setter
    def diviser(self, diviser):
        """Sets the diviser of this CreateTaskRequestPaidStorageParams.

        Kolihestvo hastei, na kotoroe neobhodimo razdelit zaprohennyi othet.  # noqa: E501

        :param diviser: The diviser of this CreateTaskRequestPaidStorageParams.  # noqa: E501
        :type: int
        """

        self._diviser = diviser

    @property
    def remainder(self):
        """Gets the remainder of this CreateTaskRequestPaidStorageParams.  # noqa: E501

        Nomer hasti otheta, kotoruu neobhodimo poluhit.  # noqa: E501

        :return: The remainder of this CreateTaskRequestPaidStorageParams.  # noqa: E501
        :rtype: int
        """
        return self._remainder

    @remainder.setter
    def remainder(self, remainder):
        """Sets the remainder of this CreateTaskRequestPaidStorageParams.

        Nomer hasti otheta, kotoruu neobhodimo poluhit.  # noqa: E501

        :param remainder: The remainder of this CreateTaskRequestPaidStorageParams.  # noqa: E501
        :type: int
        """

        self._remainder = remainder

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateTaskRequestPaidStorageParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTaskRequestPaidStorageParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
