# coding: utf-8

"""
    Opisanie API Statistiki

    S pomohu etih metodov mohno poluhit othety.   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.statistics.api_client import ApiClient


class OtlohennaaGeneraciaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_delayed_gen_tasks_create_post(self, body, **kwargs):  # noqa: E501
        """Sozdanie zadania na generaciu otheta  # noqa: E501

        Metod pozvolaet sozdavat zadanie na generaciu neobhodimogo otheta. <br> <br> <b>Detali poluhenia otheta o platnom hranenii:</b>   <br> Maksimalnyi diapazon dat - 8 dnei. <br> Za odin zapros poluhit othet mohno tolko v tom sluhae, esli razmer ego ne prevyhaet 50 mb. Esli razmer otheta bolhe, to vospolzuites parametrami <code>diviser</code> i <code>remainder</code>, htoby poluhit othet po hastam.<br> Ponat, hto razmer otheta prevyhaet 50 mb, mohno proveriv status zadania. V otvete budet soderhatsa stroka \"report max bytes error\".  Maksimum 1 zapros v minutu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_delayed_gen_tasks_create_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTaskRequest body: (required)
        :return: CreateTaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_delayed_gen_tasks_create_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_delayed_gen_tasks_create_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_delayed_gen_tasks_create_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Sozdanie zadania na generaciu otheta  # noqa: E501

        Metod pozvolaet sozdavat zadanie na generaciu neobhodimogo otheta. <br> <br> <b>Detali poluhenia otheta o platnom hranenii:</b>   <br> Maksimalnyi diapazon dat - 8 dnei. <br> Za odin zapros poluhit othet mohno tolko v tom sluhae, esli razmer ego ne prevyhaet 50 mb. Esli razmer otheta bolhe, to vospolzuites parametrami <code>diviser</code> i <code>remainder</code>, htoby poluhit othet po hastam.<br> Ponat, hto razmer otheta prevyhaet 50 mb, mohno proveriv status zadania. V otvete budet soderhatsa stroka \"report max bytes error\".  Maksimum 1 zapros v minutu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_delayed_gen_tasks_create_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTaskRequest body: (required)
        :return: CreateTaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_delayed_gen_tasks_create_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_delayed_gen_tasks_create_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/delayed-gen/tasks/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateTaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_delayed_gen_tasks_download_get(self, body, **kwargs):  # noqa: E501
        """Poluhit othet po ID zadania  # noqa: E501

        Metod pozvolaet poluhat sgenerirovannyi othet po ID zadania. Maksimum 1 zapros v minutu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_delayed_gen_tasks_download_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DownloadRequest body: (required)
        :return: ResponsePaidStorage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_delayed_gen_tasks_download_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_delayed_gen_tasks_download_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_delayed_gen_tasks_download_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """Poluhit othet po ID zadania  # noqa: E501

        Metod pozvolaet poluhat sgenerirovannyi othet po ID zadania. Maksimum 1 zapros v minutu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_delayed_gen_tasks_download_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DownloadRequest body: (required)
        :return: ResponsePaidStorage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_delayed_gen_tasks_download_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_delayed_gen_tasks_download_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/delayed-gen/tasks/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponsePaidStorage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_delayed_gen_tasks_get(self, body, **kwargs):  # noqa: E501
        """Poluhit status zadania  # noqa: E501

        Pozvolaet poluhat status zadania na generaciu otheta. Maksimum 1 zapros v minutu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_delayed_gen_tasks_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetTasksRequest body: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_delayed_gen_tasks_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_delayed_gen_tasks_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_delayed_gen_tasks_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """Poluhit status zadania  # noqa: E501

        Pozvolaet poluhat status zadania na generaciu otheta. Maksimum 1 zapros v minutu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_delayed_gen_tasks_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetTasksRequest body: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_delayed_gen_tasks_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_delayed_gen_tasks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/delayed-gen/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
