# coding: utf-8

"""
    Opisanie API Voprosov i Otzyvov

    `Vahno!` Dopuskaetsa 1 zapros v sekundu na metody voprosov i otzyvov v celom. Pri prevyhenii limita do 3 zaprosov v sekundu posleduet blokirovka na 60 sekund.   # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20012Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count_unanswered': 'int',
        'count_archive': 'int',
        'feedbacks': 'ResponseFeadback'
    }

    attribute_map = {
        'count_unanswered': 'countUnanswered',
        'count_archive': 'countArchive',
        'feedbacks': 'feedbacks'
    }

    def __init__(self, count_unanswered=None, count_archive=None, feedbacks=None):  # noqa: E501
        """InlineResponse20012Data - a model defined in Swagger"""  # noqa: E501
        self._count_unanswered = None
        self._count_archive = None
        self._feedbacks = None
        self.discriminator = None
        if count_unanswered is not None:
            self.count_unanswered = count_unanswered
        if count_archive is not None:
            self.count_archive = count_archive
        if feedbacks is not None:
            self.feedbacks = feedbacks

    @property
    def count_unanswered(self):
        """Gets the count_unanswered of this InlineResponse20012Data.  # noqa: E501

        Kolihestvo neobrabotannyh otzyvov  # noqa: E501

        :return: The count_unanswered of this InlineResponse20012Data.  # noqa: E501
        :rtype: int
        """
        return self._count_unanswered

    @count_unanswered.setter
    def count_unanswered(self, count_unanswered):
        """Sets the count_unanswered of this InlineResponse20012Data.

        Kolihestvo neobrabotannyh otzyvov  # noqa: E501

        :param count_unanswered: The count_unanswered of this InlineResponse20012Data.  # noqa: E501
        :type: int
        """

        self._count_unanswered = count_unanswered

    @property
    def count_archive(self):
        """Gets the count_archive of this InlineResponse20012Data.  # noqa: E501

        Kolihestvo obrabotannyh otzyvov  # noqa: E501

        :return: The count_archive of this InlineResponse20012Data.  # noqa: E501
        :rtype: int
        """
        return self._count_archive

    @count_archive.setter
    def count_archive(self, count_archive):
        """Sets the count_archive of this InlineResponse20012Data.

        Kolihestvo obrabotannyh otzyvov  # noqa: E501

        :param count_archive: The count_archive of this InlineResponse20012Data.  # noqa: E501
        :type: int
        """

        self._count_archive = count_archive

    @property
    def feedbacks(self):
        """Gets the feedbacks of this InlineResponse20012Data.  # noqa: E501


        :return: The feedbacks of this InlineResponse20012Data.  # noqa: E501
        :rtype: ResponseFeadback
        """
        return self._feedbacks

    @feedbacks.setter
    def feedbacks(self, feedbacks):
        """Sets the feedbacks of this InlineResponse20012Data.


        :param feedbacks: The feedbacks of this InlineResponse20012Data.  # noqa: E501
        :type: ResponseFeadback
        """

        self._feedbacks = feedbacks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20012Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20012Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
