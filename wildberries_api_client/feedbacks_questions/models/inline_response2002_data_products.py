# coding: utf-8

"""
    Opisanie API Voprosov i Otzyvov

    `Vahno!` Dopuskaetsa 1 zapros v sekundu na metody voprosov i otzyvov v celom. Pri prevyhenii limita do 3 zaprosov v sekundu posleduet blokirovka na 60 sekund.   # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002DataProducts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nm_id': 'int',
        'imt_id': 'int',
        'product_name': 'str',
        'brand_name': 'str',
        'questions_count': 'str'
    }

    attribute_map = {
        'nm_id': 'nmId',
        'imt_id': 'imtId',
        'product_name': 'productName',
        'brand_name': 'brandName',
        'questions_count': 'questionsCount'
    }

    def __init__(self, nm_id=None, imt_id=None, product_name=None, brand_name=None, questions_count=None):  # noqa: E501
        """InlineResponse2002DataProducts - a model defined in Swagger"""  # noqa: E501
        self._nm_id = None
        self._imt_id = None
        self._product_name = None
        self._brand_name = None
        self._questions_count = None
        self.discriminator = None
        if nm_id is not None:
            self.nm_id = nm_id
        if imt_id is not None:
            self.imt_id = imt_id
        if product_name is not None:
            self.product_name = product_name
        if brand_name is not None:
            self.brand_name = brand_name
        if questions_count is not None:
            self.questions_count = questions_count

    @property
    def nm_id(self):
        """Gets the nm_id of this InlineResponse2002DataProducts.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this InlineResponse2002DataProducts.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this InlineResponse2002DataProducts.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this InlineResponse2002DataProducts.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def imt_id(self):
        """Gets the imt_id of this InlineResponse2002DataProducts.  # noqa: E501

        Identifikator kartohki tovara  # noqa: E501

        :return: The imt_id of this InlineResponse2002DataProducts.  # noqa: E501
        :rtype: int
        """
        return self._imt_id

    @imt_id.setter
    def imt_id(self, imt_id):
        """Sets the imt_id of this InlineResponse2002DataProducts.

        Identifikator kartohki tovara  # noqa: E501

        :param imt_id: The imt_id of this InlineResponse2002DataProducts.  # noqa: E501
        :type: int
        """

        self._imt_id = imt_id

    @property
    def product_name(self):
        """Gets the product_name of this InlineResponse2002DataProducts.  # noqa: E501

        Nazvanie tovara  # noqa: E501

        :return: The product_name of this InlineResponse2002DataProducts.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this InlineResponse2002DataProducts.

        Nazvanie tovara  # noqa: E501

        :param product_name: The product_name of this InlineResponse2002DataProducts.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def brand_name(self):
        """Gets the brand_name of this InlineResponse2002DataProducts.  # noqa: E501

        Brend tovara  # noqa: E501

        :return: The brand_name of this InlineResponse2002DataProducts.  # noqa: E501
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this InlineResponse2002DataProducts.

        Brend tovara  # noqa: E501

        :param brand_name: The brand_name of this InlineResponse2002DataProducts.  # noqa: E501
        :type: str
        """

        self._brand_name = brand_name

    @property
    def questions_count(self):
        """Gets the questions_count of this InlineResponse2002DataProducts.  # noqa: E501

        Kolihestvo voprosov  # noqa: E501

        :return: The questions_count of this InlineResponse2002DataProducts.  # noqa: E501
        :rtype: str
        """
        return self._questions_count

    @questions_count.setter
    def questions_count(self, questions_count):
        """Sets the questions_count of this InlineResponse2002DataProducts.

        Kolihestvo voprosov  # noqa: E501

        :param questions_count: The questions_count of this InlineResponse2002DataProducts.  # noqa: E501
        :type: str
        """

        self._questions_count = questions_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002DataProducts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002DataProducts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
