# coding: utf-8

"""
    Opisanie API Voprosov i Otzyvov

    `Vahno!` Dopuskaetsa 1 zapros v sekundu na metody voprosov i otzyvov v celom. Pri prevyhenii limita do 3 zaprosov v sekundu posleduet blokirovka na 60 sekund.   # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20019DataProductDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nm_id': 'int',
        'imt_id': 'int',
        'product_name': 'str',
        'supplier_article': 'str',
        'supplier_name': 'str',
        'brand_name': 'str',
        'size': 'str'
    }

    attribute_map = {
        'nm_id': 'nmId',
        'imt_id': 'imtId',
        'product_name': 'productName',
        'supplier_article': 'supplierArticle',
        'supplier_name': 'supplierName',
        'brand_name': 'brandName',
        'size': 'size'
    }

    def __init__(self, nm_id=None, imt_id=None, product_name=None, supplier_article=None, supplier_name=None, brand_name=None, size=None):  # noqa: E501
        """InlineResponse20019DataProductDetails - a model defined in Swagger"""  # noqa: E501
        self._nm_id = None
        self._imt_id = None
        self._product_name = None
        self._supplier_article = None
        self._supplier_name = None
        self._brand_name = None
        self._size = None
        self.discriminator = None
        if nm_id is not None:
            self.nm_id = nm_id
        if imt_id is not None:
            self.imt_id = imt_id
        if product_name is not None:
            self.product_name = product_name
        if supplier_article is not None:
            self.supplier_article = supplier_article
        if supplier_name is not None:
            self.supplier_name = supplier_name
        if brand_name is not None:
            self.brand_name = brand_name
        if size is not None:
            self.size = size

    @property
    def nm_id(self):
        """Gets the nm_id of this InlineResponse20019DataProductDetails.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this InlineResponse20019DataProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this InlineResponse20019DataProductDetails.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this InlineResponse20019DataProductDetails.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def imt_id(self):
        """Gets the imt_id of this InlineResponse20019DataProductDetails.  # noqa: E501

        Identifikator kartohki tovara  # noqa: E501

        :return: The imt_id of this InlineResponse20019DataProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._imt_id

    @imt_id.setter
    def imt_id(self, imt_id):
        """Sets the imt_id of this InlineResponse20019DataProductDetails.

        Identifikator kartohki tovara  # noqa: E501

        :param imt_id: The imt_id of this InlineResponse20019DataProductDetails.  # noqa: E501
        :type: int
        """

        self._imt_id = imt_id

    @property
    def product_name(self):
        """Gets the product_name of this InlineResponse20019DataProductDetails.  # noqa: E501

        Nazvanie tovara  # noqa: E501

        :return: The product_name of this InlineResponse20019DataProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this InlineResponse20019DataProductDetails.

        Nazvanie tovara  # noqa: E501

        :param product_name: The product_name of this InlineResponse20019DataProductDetails.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def supplier_article(self):
        """Gets the supplier_article of this InlineResponse20019DataProductDetails.  # noqa: E501

        Artikul prodavca  # noqa: E501

        :return: The supplier_article of this InlineResponse20019DataProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._supplier_article

    @supplier_article.setter
    def supplier_article(self, supplier_article):
        """Sets the supplier_article of this InlineResponse20019DataProductDetails.

        Artikul prodavca  # noqa: E501

        :param supplier_article: The supplier_article of this InlineResponse20019DataProductDetails.  # noqa: E501
        :type: str
        """

        self._supplier_article = supplier_article

    @property
    def supplier_name(self):
        """Gets the supplier_name of this InlineResponse20019DataProductDetails.  # noqa: E501

        Ima prodavca  # noqa: E501

        :return: The supplier_name of this InlineResponse20019DataProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._supplier_name

    @supplier_name.setter
    def supplier_name(self, supplier_name):
        """Sets the supplier_name of this InlineResponse20019DataProductDetails.

        Ima prodavca  # noqa: E501

        :param supplier_name: The supplier_name of this InlineResponse20019DataProductDetails.  # noqa: E501
        :type: str
        """

        self._supplier_name = supplier_name

    @property
    def brand_name(self):
        """Gets the brand_name of this InlineResponse20019DataProductDetails.  # noqa: E501

        Brend tovara  # noqa: E501

        :return: The brand_name of this InlineResponse20019DataProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this InlineResponse20019DataProductDetails.

        Brend tovara  # noqa: E501

        :param brand_name: The brand_name of this InlineResponse20019DataProductDetails.  # noqa: E501
        :type: str
        """

        self._brand_name = brand_name

    @property
    def size(self):
        """Gets the size of this InlineResponse20019DataProductDetails.  # noqa: E501

        Razmer tovara (`techSize` v KT)  # noqa: E501

        :return: The size of this InlineResponse20019DataProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this InlineResponse20019DataProductDetails.

        Razmer tovara (`techSize` v KT)  # noqa: E501

        :param size: The size of this InlineResponse20019DataProductDetails.  # noqa: E501
        :type: str
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20019DataProductDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20019DataProductDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
