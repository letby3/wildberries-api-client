# coding: utf-8

"""
    Opisanie API Voprosov i Otzyvov

    `Vahno!` Dopuskaetsa 1 zapros v sekundu na metody voprosov i otzyvov v celom. Pri prevyhenii limita do 3 zaprosov v sekundu posleduet blokirovka na 60 sekund.   # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20019DataVideo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'preview_image': 'str',
        'link': 'str',
        'duration_sec': 'int'
    }

    attribute_map = {
        'preview_image': 'previewImage',
        'link': 'link',
        'duration_sec': 'duration_sec'
    }

    def __init__(self, preview_image=None, link=None, duration_sec=None):  # noqa: E501
        """InlineResponse20019DataVideo - a model defined in Swagger"""  # noqa: E501
        self._preview_image = None
        self._link = None
        self._duration_sec = None
        self.discriminator = None
        if preview_image is not None:
            self.preview_image = preview_image
        if link is not None:
            self.link = link
        if duration_sec is not None:
            self.duration_sec = duration_sec

    @property
    def preview_image(self):
        """Gets the preview_image of this InlineResponse20019DataVideo.  # noqa: E501

        Ssylka na oblohku video  # noqa: E501

        :return: The preview_image of this InlineResponse20019DataVideo.  # noqa: E501
        :rtype: str
        """
        return self._preview_image

    @preview_image.setter
    def preview_image(self, preview_image):
        """Sets the preview_image of this InlineResponse20019DataVideo.

        Ssylka na oblohku video  # noqa: E501

        :param preview_image: The preview_image of this InlineResponse20019DataVideo.  # noqa: E501
        :type: str
        """

        self._preview_image = preview_image

    @property
    def link(self):
        """Gets the link of this InlineResponse20019DataVideo.  # noqa: E501

        Ssylka na fail pleilista video (dostupno po protokolu hls)  # noqa: E501

        :return: The link of this InlineResponse20019DataVideo.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this InlineResponse20019DataVideo.

        Ssylka na fail pleilista video (dostupno po protokolu hls)  # noqa: E501

        :param link: The link of this InlineResponse20019DataVideo.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def duration_sec(self):
        """Gets the duration_sec of this InlineResponse20019DataVideo.  # noqa: E501

        Obhaa prodolhitelnost video  # noqa: E501

        :return: The duration_sec of this InlineResponse20019DataVideo.  # noqa: E501
        :rtype: int
        """
        return self._duration_sec

    @duration_sec.setter
    def duration_sec(self, duration_sec):
        """Sets the duration_sec of this InlineResponse20019DataVideo.

        Obhaa prodolhitelnost video  # noqa: E501

        :param duration_sec: The duration_sec of this InlineResponse20019DataVideo.  # noqa: E501
        :type: int
        """

        self._duration_sec = duration_sec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20019DataVideo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20019DataVideo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
