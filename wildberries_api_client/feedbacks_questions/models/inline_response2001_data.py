# coding: utf-8

"""
    Opisanie API Voprosov i Otzyvov

    `Vahno!` Dopuskaetsa 1 zapros v sekundu na metody voprosov i otzyvov v celom. Pri prevyhenii limita do 3 zaprosov v sekundu posleduet blokirovka na 60 sekund.   # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_new_questions': 'bool',
        'has_new_feedbacks': 'bool'
    }

    attribute_map = {
        'has_new_questions': 'hasNewQuestions',
        'has_new_feedbacks': 'hasNewFeedbacks'
    }

    def __init__(self, has_new_questions=None, has_new_feedbacks=None):  # noqa: E501
        """InlineResponse2001Data - a model defined in Swagger"""  # noqa: E501
        self._has_new_questions = None
        self._has_new_feedbacks = None
        self.discriminator = None
        if has_new_questions is not None:
            self.has_new_questions = has_new_questions
        if has_new_feedbacks is not None:
            self.has_new_feedbacks = has_new_feedbacks

    @property
    def has_new_questions(self):
        """Gets the has_new_questions of this InlineResponse2001Data.  # noqa: E501

        Est li neprosmotrennye voprosy (`true` est, `false` net)  # noqa: E501

        :return: The has_new_questions of this InlineResponse2001Data.  # noqa: E501
        :rtype: bool
        """
        return self._has_new_questions

    @has_new_questions.setter
    def has_new_questions(self, has_new_questions):
        """Sets the has_new_questions of this InlineResponse2001Data.

        Est li neprosmotrennye voprosy (`true` est, `false` net)  # noqa: E501

        :param has_new_questions: The has_new_questions of this InlineResponse2001Data.  # noqa: E501
        :type: bool
        """

        self._has_new_questions = has_new_questions

    @property
    def has_new_feedbacks(self):
        """Gets the has_new_feedbacks of this InlineResponse2001Data.  # noqa: E501

        Est li neprosmotrennye otzyvy (`true` est, `false` net)  # noqa: E501

        :return: The has_new_feedbacks of this InlineResponse2001Data.  # noqa: E501
        :rtype: bool
        """
        return self._has_new_feedbacks

    @has_new_feedbacks.setter
    def has_new_feedbacks(self, has_new_feedbacks):
        """Sets the has_new_feedbacks of this InlineResponse2001Data.

        Est li neprosmotrennye otzyvy (`true` est, `false` net)  # noqa: E501

        :param has_new_feedbacks: The has_new_feedbacks of this InlineResponse2001Data.  # noqa: E501
        :type: bool
        """

        self._has_new_feedbacks = has_new_feedbacks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
