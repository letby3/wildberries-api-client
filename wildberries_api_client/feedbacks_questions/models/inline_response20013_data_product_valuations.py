# coding: utf-8

"""
    Opisanie API Voprosov i Otzyvov

    `Vahno!` Dopuskaetsa 1 zapros v sekundu na metody voprosov i otzyvov v celom. Pri prevyhenii limita do 3 zaprosov v sekundu posleduet blokirovka na 60 sekund.   # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20013DataProductValuations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_1': 'str',
        '_2': 'str',
        '_3': 'str',
        '_4': 'str'
    }

    attribute_map = {
        '_1': '1',
        '_2': '2',
        '_3': '3',
        '_4': '4'
    }

    def __init__(self, _1=None, _2=None, _3=None, _4=None):  # noqa: E501
        """InlineResponse20013DataProductValuations - a model defined in Swagger"""  # noqa: E501
        self.__1 = None
        self.__2 = None
        self.__3 = None
        self.__4 = None
        self.discriminator = None
        if _1 is not None:
            self._1 = _1
        if _2 is not None:
            self._2 = _2
        if _3 is not None:
            self._3 = _3
        if _4 is not None:
            self._4 = _4

    @property
    def _1(self):
        """Gets the _1 of this InlineResponse20013DataProductValuations.  # noqa: E501


        :return: The _1 of this InlineResponse20013DataProductValuations.  # noqa: E501
        :rtype: str
        """
        return self.__1

    @_1.setter
    def _1(self, _1):
        """Sets the _1 of this InlineResponse20013DataProductValuations.


        :param _1: The _1 of this InlineResponse20013DataProductValuations.  # noqa: E501
        :type: str
        """

        self.__1 = _1

    @property
    def _2(self):
        """Gets the _2 of this InlineResponse20013DataProductValuations.  # noqa: E501


        :return: The _2 of this InlineResponse20013DataProductValuations.  # noqa: E501
        :rtype: str
        """
        return self.__2

    @_2.setter
    def _2(self, _2):
        """Sets the _2 of this InlineResponse20013DataProductValuations.


        :param _2: The _2 of this InlineResponse20013DataProductValuations.  # noqa: E501
        :type: str
        """

        self.__2 = _2

    @property
    def _3(self):
        """Gets the _3 of this InlineResponse20013DataProductValuations.  # noqa: E501


        :return: The _3 of this InlineResponse20013DataProductValuations.  # noqa: E501
        :rtype: str
        """
        return self.__3

    @_3.setter
    def _3(self, _3):
        """Sets the _3 of this InlineResponse20013DataProductValuations.


        :param _3: The _3 of this InlineResponse20013DataProductValuations.  # noqa: E501
        :type: str
        """

        self.__3 = _3

    @property
    def _4(self):
        """Gets the _4 of this InlineResponse20013DataProductValuations.  # noqa: E501


        :return: The _4 of this InlineResponse20013DataProductValuations.  # noqa: E501
        :rtype: str
        """
        return self.__4

    @_4.setter
    def _4(self, _4):
        """Sets the _4 of this InlineResponse20013DataProductValuations.


        :param _4: The _4 of this InlineResponse20013DataProductValuations.  # noqa: E501
        :type: str
        """

        self.__4 = _4

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20013DataProductValuations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20013DataProductValuations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
