# coding: utf-8

"""
    API cen i skidok

    S pomohu etih metodov mohno ustanavlivat ceny i skidki. Maksimum — 10 zaprosov za 6 sekund summarno dla vseh metodov.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1PricesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nm_id': 'int',
        'price': 'float'
    }

    attribute_map = {
        'nm_id': 'nmId',
        'price': 'price'
    }

    def __init__(self, nm_id=None, price=None):  # noqa: E501
        """V1PricesBody - a model defined in Swagger"""  # noqa: E501
        self._nm_id = None
        self._price = None
        self.discriminator = None
        if nm_id is not None:
            self.nm_id = nm_id
        if price is not None:
            self.price = price

    @property
    def nm_id(self):
        """Gets the nm_id of this V1PricesBody.  # noqa: E501

        Nomenklatura  # noqa: E501

        :return: The nm_id of this V1PricesBody.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this V1PricesBody.

        Nomenklatura  # noqa: E501

        :param nm_id: The nm_id of this V1PricesBody.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def price(self):
        """Gets the price of this V1PricesBody.  # noqa: E501

        cena (ukazyvat bez kopeek)  # noqa: E501

        :return: The price of this V1PricesBody.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this V1PricesBody.

        cena (ukazyvat bez kopeek)  # noqa: E501

        :param price: The price of this V1PricesBody.  # noqa: E501
        :type: float
        """

        self._price = price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1PricesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1PricesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
