# coding: utf-8

"""
    API cen i skidok

    S pomohu etih metodov mohno ustanavlivat ceny i skidki. Maksimum — 10 zaprosov za 6 sekund summarno dla vseh metodov.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SizeGood(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nm_id': 'int',
        'size_id': 'int',
        'vendor_code': 'str',
        'price': 'int',
        'currency_iso_code4217': 'str',
        'discounted_price': 'int',
        'discount': 'int',
        'tech_size_name': 'str',
        'editable_size_price': 'bool'
    }

    attribute_map = {
        'nm_id': 'nmID',
        'size_id': 'sizeID',
        'vendor_code': 'vendorCode',
        'price': 'price',
        'currency_iso_code4217': 'currencyIsoCode4217',
        'discounted_price': 'discountedPrice',
        'discount': 'discount',
        'tech_size_name': 'techSizeName',
        'editable_size_price': 'editableSizePrice'
    }

    def __init__(self, nm_id=None, size_id=None, vendor_code=None, price=None, currency_iso_code4217=None, discounted_price=None, discount=None, tech_size_name=None, editable_size_price=None):  # noqa: E501
        """SizeGood - a model defined in Swagger"""  # noqa: E501
        self._nm_id = None
        self._size_id = None
        self._vendor_code = None
        self._price = None
        self._currency_iso_code4217 = None
        self._discounted_price = None
        self._discount = None
        self._tech_size_name = None
        self._editable_size_price = None
        self.discriminator = None
        if nm_id is not None:
            self.nm_id = nm_id
        if size_id is not None:
            self.size_id = size_id
        if vendor_code is not None:
            self.vendor_code = vendor_code
        if price is not None:
            self.price = price
        if currency_iso_code4217 is not None:
            self.currency_iso_code4217 = currency_iso_code4217
        if discounted_price is not None:
            self.discounted_price = discounted_price
        if discount is not None:
            self.discount = discount
        if tech_size_name is not None:
            self.tech_size_name = tech_size_name
        if editable_size_price is not None:
            self.editable_size_price = editable_size_price

    @property
    def nm_id(self):
        """Gets the nm_id of this SizeGood.  # noqa: E501

        Artikul Wildberries  # noqa: E501

        :return: The nm_id of this SizeGood.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this SizeGood.

        Artikul Wildberries  # noqa: E501

        :param nm_id: The nm_id of this SizeGood.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def size_id(self):
        """Gets the size_id of this SizeGood.  # noqa: E501

        ID razmera. Mohno poluhit s pomohu metoda [Poluhenie spiska tovarov po artikulam](./#tag/Spiski-tovarov/paths/~1api~1v2~1list~1goods~1filter/get), pole `sizeID`. V metodah kontenta eto pole `chrtID`  # noqa: E501

        :return: The size_id of this SizeGood.  # noqa: E501
        :rtype: int
        """
        return self._size_id

    @size_id.setter
    def size_id(self, size_id):
        """Sets the size_id of this SizeGood.

        ID razmera. Mohno poluhit s pomohu metoda [Poluhenie spiska tovarov po artikulam](./#tag/Spiski-tovarov/paths/~1api~1v2~1list~1goods~1filter/get), pole `sizeID`. V metodah kontenta eto pole `chrtID`  # noqa: E501

        :param size_id: The size_id of this SizeGood.  # noqa: E501
        :type: int
        """

        self._size_id = size_id

    @property
    def vendor_code(self):
        """Gets the vendor_code of this SizeGood.  # noqa: E501

        Artikul prodavca  # noqa: E501

        :return: The vendor_code of this SizeGood.  # noqa: E501
        :rtype: str
        """
        return self._vendor_code

    @vendor_code.setter
    def vendor_code(self, vendor_code):
        """Sets the vendor_code of this SizeGood.

        Artikul prodavca  # noqa: E501

        :param vendor_code: The vendor_code of this SizeGood.  # noqa: E501
        :type: str
        """

        self._vendor_code = vendor_code

    @property
    def price(self):
        """Gets the price of this SizeGood.  # noqa: E501

        cena  # noqa: E501

        :return: The price of this SizeGood.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SizeGood.

        cena  # noqa: E501

        :param price: The price of this SizeGood.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def currency_iso_code4217(self):
        """Gets the currency_iso_code4217 of this SizeGood.  # noqa: E501

        Valuta, po standartu ISO 4217  # noqa: E501

        :return: The currency_iso_code4217 of this SizeGood.  # noqa: E501
        :rtype: str
        """
        return self._currency_iso_code4217

    @currency_iso_code4217.setter
    def currency_iso_code4217(self, currency_iso_code4217):
        """Sets the currency_iso_code4217 of this SizeGood.

        Valuta, po standartu ISO 4217  # noqa: E501

        :param currency_iso_code4217: The currency_iso_code4217 of this SizeGood.  # noqa: E501
        :type: str
        """

        self._currency_iso_code4217 = currency_iso_code4217

    @property
    def discounted_price(self):
        """Gets the discounted_price of this SizeGood.  # noqa: E501

        cena so skidkoi  # noqa: E501

        :return: The discounted_price of this SizeGood.  # noqa: E501
        :rtype: int
        """
        return self._discounted_price

    @discounted_price.setter
    def discounted_price(self, discounted_price):
        """Sets the discounted_price of this SizeGood.

        cena so skidkoi  # noqa: E501

        :param discounted_price: The discounted_price of this SizeGood.  # noqa: E501
        :type: int
        """

        self._discounted_price = discounted_price

    @property
    def discount(self):
        """Gets the discount of this SizeGood.  # noqa: E501

        Skidka, %  # noqa: E501

        :return: The discount of this SizeGood.  # noqa: E501
        :rtype: int
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this SizeGood.

        Skidka, %  # noqa: E501

        :param discount: The discount of this SizeGood.  # noqa: E501
        :type: int
        """

        self._discount = discount

    @property
    def tech_size_name(self):
        """Gets the tech_size_name of this SizeGood.  # noqa: E501

        Razmer tovara  # noqa: E501

        :return: The tech_size_name of this SizeGood.  # noqa: E501
        :rtype: str
        """
        return self._tech_size_name

    @tech_size_name.setter
    def tech_size_name(self, tech_size_name):
        """Sets the tech_size_name of this SizeGood.

        Razmer tovara  # noqa: E501

        :param tech_size_name: The tech_size_name of this SizeGood.  # noqa: E501
        :type: str
        """

        self._tech_size_name = tech_size_name

    @property
    def editable_size_price(self):
        """Gets the editable_size_price of this SizeGood.  # noqa: E501

        Mohno li ustanavlivat ceny otdelno dla raznyh razmerov, vsegda `true`. Eta vozmohnost zavisit ot kategorii tovara   # noqa: E501

        :return: The editable_size_price of this SizeGood.  # noqa: E501
        :rtype: bool
        """
        return self._editable_size_price

    @editable_size_price.setter
    def editable_size_price(self, editable_size_price):
        """Sets the editable_size_price of this SizeGood.

        Mohno li ustanavlivat ceny otdelno dla raznyh razmerov, vsegda `true`. Eta vozmohnost zavisit ot kategorii tovara   # noqa: E501

        :param editable_size_price: The editable_size_price of this SizeGood.  # noqa: E501
        :type: bool
        """

        self._editable_size_price = editable_size_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SizeGood, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SizeGood):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
