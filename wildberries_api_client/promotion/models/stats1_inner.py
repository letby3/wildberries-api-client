# coding: utf-8

"""
    Opisanie API Prodvihenie

    Sinhronizacia dannyh iz bd proishodit raz v 3 minuty.  <br>Izmenenie statusa proishodit raz v 1 minutu. Vnutri etogo intervala budet sohraneno poslednee deistvie po izmeneniu statusa. <br>Izmenenie stavki proishodit raz v 30 sekund. Vnutri etogo intervala budet sohraneno poslednee deistvie po izmeneniu stavki.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Stats1Inner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'views': 'int',
        'clicks': 'int',
        'atbs': 'int',
        'ctr': 'float'
    }

    attribute_map = {
        'views': 'views',
        'clicks': 'clicks',
        'atbs': 'atbs',
        'ctr': 'ctr'
    }

    def __init__(self, views=None, clicks=None, atbs=None, ctr=None):  # noqa: E501
        """Stats1Inner - a model defined in Swagger"""  # noqa: E501
        self._views = None
        self._clicks = None
        self._atbs = None
        self._ctr = None
        self.discriminator = None
        if views is not None:
            self.views = views
        if clicks is not None:
            self.clicks = clicks
        if atbs is not None:
            self.atbs = atbs
        if ctr is not None:
            self.ctr = ctr

    @property
    def views(self):
        """Gets the views of this Stats1Inner.  # noqa: E501

        Kolihestvo prosmotrov  # noqa: E501

        :return: The views of this Stats1Inner.  # noqa: E501
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this Stats1Inner.

        Kolihestvo prosmotrov  # noqa: E501

        :param views: The views of this Stats1Inner.  # noqa: E501
        :type: int
        """

        self._views = views

    @property
    def clicks(self):
        """Gets the clicks of this Stats1Inner.  # noqa: E501

        Kolihestvo klikov  # noqa: E501

        :return: The clicks of this Stats1Inner.  # noqa: E501
        :rtype: int
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this Stats1Inner.

        Kolihestvo klikov  # noqa: E501

        :param clicks: The clicks of this Stats1Inner.  # noqa: E501
        :type: int
        """

        self._clicks = clicks

    @property
    def atbs(self):
        """Gets the atbs of this Stats1Inner.  # noqa: E501

        Kolihestvo dobavlenii tovarov v korzinu  # noqa: E501

        :return: The atbs of this Stats1Inner.  # noqa: E501
        :rtype: int
        """
        return self._atbs

    @atbs.setter
    def atbs(self, atbs):
        """Sets the atbs of this Stats1Inner.

        Kolihestvo dobavlenii tovarov v korzinu  # noqa: E501

        :param atbs: The atbs of this Stats1Inner.  # noqa: E501
        :type: int
        """

        self._atbs = atbs

    @property
    def ctr(self):
        """Gets the ctr of this Stats1Inner.  # noqa: E501

        CTR (click-through rate) — to pokazatel klikabelnosti, to est otnohenie hisla klikov k kolihestvu pokazov v ramkah mediakampanii.   # noqa: E501

        :return: The ctr of this Stats1Inner.  # noqa: E501
        :rtype: float
        """
        return self._ctr

    @ctr.setter
    def ctr(self, ctr):
        """Sets the ctr of this Stats1Inner.

        CTR (click-through rate) — to pokazatel klikabelnosti, to est otnohenie hisla klikov k kolihestvu pokazov v ramkah mediakampanii.   # noqa: E501

        :param ctr: The ctr of this Stats1Inner.  # noqa: E501
        :type: float
        """

        self._ctr = ctr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Stats1Inner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stats1Inner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
