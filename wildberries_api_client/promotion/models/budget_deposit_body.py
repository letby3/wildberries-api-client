# coding: utf-8

"""
    Opisanie API Prodvihenie

    Sinhronizacia dannyh iz bd proishodit raz v 3 minuty.  <br>Izmenenie statusa proishodit raz v 1 minutu. Vnutri etogo intervala budet sohraneno poslednee deistvie po izmeneniu statusa. <br>Izmenenie stavki proishodit raz v 30 sekund. Vnutri etogo intervala budet sohraneno poslednee deistvie po izmeneniu stavki.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BudgetDepositBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sum': 'int',
        'type': 'int',
        '_return': 'bool'
    }

    attribute_map = {
        'sum': 'sum',
        'type': 'type',
        '_return': 'return'
    }

    def __init__(self, sum=None, type=None, _return=None):  # noqa: E501
        """BudgetDepositBody - a model defined in Swagger"""  # noqa: E501
        self._sum = None
        self._type = None
        self.__return = None
        self.discriminator = None
        if sum is not None:
            self.sum = sum
        if type is not None:
            self.type = type
        if _return is not None:
            self._return = _return

    @property
    def sum(self):
        """Gets the sum of this BudgetDepositBody.  # noqa: E501

        Summa popolnenia (min. 500 ₽)  # noqa: E501

        :return: The sum of this BudgetDepositBody.  # noqa: E501
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this BudgetDepositBody.

        Summa popolnenia (min. 500 ₽)  # noqa: E501

        :param sum: The sum of this BudgetDepositBody.  # noqa: E501
        :type: int
        """

        self._sum = sum

    @property
    def type(self):
        """Gets the type of this BudgetDepositBody.  # noqa: E501

        <dl> <dt>Tip istohnika popolnenia:</dt> <dd><code>0</code> - balance</dd> <dd><code>1</code> - net</dd> <dd><code>3</code> - bonus</dd> </dl>   # noqa: E501

        :return: The type of this BudgetDepositBody.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BudgetDepositBody.

        <dl> <dt>Tip istohnika popolnenia:</dt> <dd><code>0</code> - balance</dd> <dd><code>1</code> - net</dd> <dd><code>3</code> - bonus</dd> </dl>   # noqa: E501

        :param type: The type of this BudgetDepositBody.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def _return(self):
        """Gets the _return of this BudgetDepositBody.  # noqa: E501

        Flag vozvrata otveta (`true` - v otvete vernetsa obnovlennyi razmer budheta kampanii, `false` ili ne ukazat parametr voobhe - ne vernetsa.)  # noqa: E501

        :return: The _return of this BudgetDepositBody.  # noqa: E501
        :rtype: bool
        """
        return self.__return

    @_return.setter
    def _return(self, _return):
        """Sets the _return of this BudgetDepositBody.

        Flag vozvrata otveta (`true` - v otvete vernetsa obnovlennyi razmer budheta kampanii, `false` ili ne ukazat parametr voobhe - ne vernetsa.)  # noqa: E501

        :param _return: The _return of this BudgetDepositBody.  # noqa: E501
        :type: bool
        """

        self.__return = _return

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetDepositBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetDepositBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
