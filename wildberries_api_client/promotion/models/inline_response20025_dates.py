# coding: utf-8

"""
    Opisanie API Prodvihenie

    Sinhronizacia dannyh iz bd proishodit raz v 3 minuty.  <br>Izmenenie statusa proishodit raz v 1 minutu. Vnutri etogo intervala budet sohraneno poslednee deistvie po izmeneniu statusa. <br>Izmenenie stavki proishodit raz v 30 sekund. Vnutri etogo intervala budet sohraneno poslednee deistvie po izmeneniu stavki.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20025Dates(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'date',
        'search': 'InlineResponse20025Search',
        'catalog': 'InlineResponse20025Catalog'
    }

    attribute_map = {
        '_date': 'date',
        'search': 'search',
        'catalog': 'catalog'
    }

    def __init__(self, _date=None, search=None, catalog=None):  # noqa: E501
        """InlineResponse20025Dates - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._search = None
        self._catalog = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if search is not None:
            self.search = search
        if catalog is not None:
            self.catalog = catalog

    @property
    def _date(self):
        """Gets the _date of this InlineResponse20025Dates.  # noqa: E501

        Data  # noqa: E501

        :return: The _date of this InlineResponse20025Dates.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse20025Dates.

        Data  # noqa: E501

        :param _date: The _date of this InlineResponse20025Dates.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def search(self):
        """Gets the search of this InlineResponse20025Dates.  # noqa: E501


        :return: The search of this InlineResponse20025Dates.  # noqa: E501
        :rtype: InlineResponse20025Search
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this InlineResponse20025Dates.


        :param search: The search of this InlineResponse20025Dates.  # noqa: E501
        :type: InlineResponse20025Search
        """

        self._search = search

    @property
    def catalog(self):
        """Gets the catalog of this InlineResponse20025Dates.  # noqa: E501


        :return: The catalog of this InlineResponse20025Dates.  # noqa: E501
        :rtype: InlineResponse20025Catalog
        """
        return self._catalog

    @catalog.setter
    def catalog(self, catalog):
        """Sets the catalog of this InlineResponse20025Dates.


        :param catalog: The catalog of this InlineResponse20025Dates.  # noqa: E501
        :type: InlineResponse20025Catalog
        """

        self._catalog = catalog

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20025Dates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20025Dates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
