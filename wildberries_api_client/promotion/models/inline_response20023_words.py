# coding: utf-8

"""
    Opisanie API Prodvihenie

    Sinhronizacia dannyh iz bd proishodit raz v 3 minuty.  <br>Izmenenie statusa proishodit raz v 1 minutu. Vnutri etogo intervala budet sohraneno poslednee deistvie po izmeneniu statusa. <br>Izmenenie stavki proishodit raz v 30 sekund. Vnutri etogo intervala budet sohraneno poslednee deistvie po izmeneniu stavki.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20023Words(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phrase': 'list[str]',
        'strong': 'list[str]',
        'excluded': 'list[str]',
        'pluse': 'list[str]',
        'keywords': 'list[InlineResponse20022WordsKeywords]',
        'fixed': 'bool'
    }

    attribute_map = {
        'phrase': 'phrase',
        'strong': 'strong',
        'excluded': 'excluded',
        'pluse': 'pluse',
        'keywords': 'keywords',
        'fixed': 'fixed'
    }

    def __init__(self, phrase=None, strong=None, excluded=None, pluse=None, keywords=None, fixed=None):  # noqa: E501
        """InlineResponse20023Words - a model defined in Swagger"""  # noqa: E501
        self._phrase = None
        self._strong = None
        self._excluded = None
        self._pluse = None
        self._keywords = None
        self._fixed = None
        self.discriminator = None
        if phrase is not None:
            self.phrase = phrase
        if strong is not None:
            self.strong = strong
        if excluded is not None:
            self.excluded = excluded
        if pluse is not None:
            self.pluse = pluse
        if keywords is not None:
            self.keywords = keywords
        if fixed is not None:
            self.fixed = fixed

    @property
    def phrase(self):
        """Gets the phrase of this InlineResponse20023Words.  # noqa: E501

        Frazovoe sootvetstvie (minus frazy)  # noqa: E501

        :return: The phrase of this InlineResponse20023Words.  # noqa: E501
        :rtype: list[str]
        """
        return self._phrase

    @phrase.setter
    def phrase(self, phrase):
        """Sets the phrase of this InlineResponse20023Words.

        Frazovoe sootvetstvie (minus frazy)  # noqa: E501

        :param phrase: The phrase of this InlineResponse20023Words.  # noqa: E501
        :type: list[str]
        """

        self._phrase = phrase

    @property
    def strong(self):
        """Gets the strong of this InlineResponse20023Words.  # noqa: E501

        Tohnoe sootvetstvie (minus frazy)  # noqa: E501

        :return: The strong of this InlineResponse20023Words.  # noqa: E501
        :rtype: list[str]
        """
        return self._strong

    @strong.setter
    def strong(self, strong):
        """Sets the strong of this InlineResponse20023Words.

        Tohnoe sootvetstvie (minus frazy)  # noqa: E501

        :param strong: The strong of this InlineResponse20023Words.  # noqa: E501
        :type: list[str]
        """

        self._strong = strong

    @property
    def excluded(self):
        """Gets the excluded of this InlineResponse20023Words.  # noqa: E501

        Minus frazy  # noqa: E501

        :return: The excluded of this InlineResponse20023Words.  # noqa: E501
        :rtype: list[str]
        """
        return self._excluded

    @excluded.setter
    def excluded(self, excluded):
        """Sets the excluded of this InlineResponse20023Words.

        Minus frazy  # noqa: E501

        :param excluded: The excluded of this InlineResponse20023Words.  # noqa: E501
        :type: list[str]
        """

        self._excluded = excluded

    @property
    def pluse(self):
        """Gets the pluse of this InlineResponse20023Words.  # noqa: E501

        Fiksirovannye frazy  # noqa: E501

        :return: The pluse of this InlineResponse20023Words.  # noqa: E501
        :rtype: list[str]
        """
        return self._pluse

    @pluse.setter
    def pluse(self, pluse):
        """Sets the pluse of this InlineResponse20023Words.

        Fiksirovannye frazy  # noqa: E501

        :param pluse: The pluse of this InlineResponse20023Words.  # noqa: E501
        :type: list[str]
        """

        self._pluse = pluse

    @property
    def keywords(self):
        """Gets the keywords of this InlineResponse20023Words.  # noqa: E501

        Blok so statistikoi po kluhevym frazam  # noqa: E501

        :return: The keywords of this InlineResponse20023Words.  # noqa: E501
        :rtype: list[InlineResponse20022WordsKeywords]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this InlineResponse20023Words.

        Blok so statistikoi po kluhevym frazam  # noqa: E501

        :param keywords: The keywords of this InlineResponse20023Words.  # noqa: E501
        :type: list[InlineResponse20022WordsKeywords]
        """

        self._keywords = keywords

    @property
    def fixed(self):
        """Gets the fixed of this InlineResponse20023Words.  # noqa: E501

        Fiksirovannye kluhevye frazy (`true` - vkluheny, `false` - vykluheny)   # noqa: E501

        :return: The fixed of this InlineResponse20023Words.  # noqa: E501
        :rtype: bool
        """
        return self._fixed

    @fixed.setter
    def fixed(self, fixed):
        """Sets the fixed of this InlineResponse20023Words.

        Fiksirovannye kluhevye frazy (`true` - vkluheny, `false` - vykluheny)   # noqa: E501

        :param fixed: The fixed of this InlineResponse20023Words.  # noqa: E501
        :type: bool
        """

        self._fixed = fixed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20023Words, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20023Words):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
