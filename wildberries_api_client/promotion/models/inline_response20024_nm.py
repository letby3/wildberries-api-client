# coding: utf-8

"""
    Opisanie API Prodvihenie

    Sinhronizacia dannyh iz bd proishodit raz v 3 minuty.  <br>Izmenenie statusa proishodit raz v 1 minutu. Vnutri etogo intervala budet sohraneno poslednee deistvie po izmeneniu statusa. <br>Izmenenie stavki proishodit raz v 30 sekund. Vnutri etogo intervala budet sohraneno poslednee deistvie po izmeneniu stavki.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20024Nm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nm_id': 'int',
        'name': 'str',
        'views': 'int',
        'clicks': 'int',
        'ctr': 'float',
        'cpc': 'float',
        'sum': 'float',
        'atbs': 'int',
        'orders': 'int',
        'cr': 'int',
        'shks': 'int',
        'sum_price': 'int'
    }

    attribute_map = {
        'nm_id': 'nmId',
        'name': 'name',
        'views': 'views',
        'clicks': 'clicks',
        'ctr': 'ctr',
        'cpc': 'cpc',
        'sum': 'sum',
        'atbs': 'atbs',
        'orders': 'orders',
        'cr': 'cr',
        'shks': 'shks',
        'sum_price': 'sum_price'
    }

    def __init__(self, nm_id=None, name=None, views=None, clicks=None, ctr=None, cpc=None, sum=None, atbs=None, orders=None, cr=None, shks=None, sum_price=None):  # noqa: E501
        """InlineResponse20024Nm - a model defined in Swagger"""  # noqa: E501
        self._nm_id = None
        self._name = None
        self._views = None
        self._clicks = None
        self._ctr = None
        self._cpc = None
        self._sum = None
        self._atbs = None
        self._orders = None
        self._cr = None
        self._shks = None
        self._sum_price = None
        self.discriminator = None
        if nm_id is not None:
            self.nm_id = nm_id
        if name is not None:
            self.name = name
        if views is not None:
            self.views = views
        if clicks is not None:
            self.clicks = clicks
        if ctr is not None:
            self.ctr = ctr
        if cpc is not None:
            self.cpc = cpc
        if sum is not None:
            self.sum = sum
        if atbs is not None:
            self.atbs = atbs
        if orders is not None:
            self.orders = orders
        if cr is not None:
            self.cr = cr
        if shks is not None:
            self.shks = shks
        if sum_price is not None:
            self.sum_price = sum_price

    @property
    def nm_id(self):
        """Gets the nm_id of this InlineResponse20024Nm.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this InlineResponse20024Nm.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this InlineResponse20024Nm.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this InlineResponse20024Nm.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def name(self):
        """Gets the name of this InlineResponse20024Nm.  # noqa: E501

        Naimenovanie tovara  # noqa: E501

        :return: The name of this InlineResponse20024Nm.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20024Nm.

        Naimenovanie tovara  # noqa: E501

        :param name: The name of this InlineResponse20024Nm.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def views(self):
        """Gets the views of this InlineResponse20024Nm.  # noqa: E501

        Kolihestvo prosmotrov  # noqa: E501

        :return: The views of this InlineResponse20024Nm.  # noqa: E501
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this InlineResponse20024Nm.

        Kolihestvo prosmotrov  # noqa: E501

        :param views: The views of this InlineResponse20024Nm.  # noqa: E501
        :type: int
        """

        self._views = views

    @property
    def clicks(self):
        """Gets the clicks of this InlineResponse20024Nm.  # noqa: E501

        Kolihestvo klikov  # noqa: E501

        :return: The clicks of this InlineResponse20024Nm.  # noqa: E501
        :rtype: int
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this InlineResponse20024Nm.

        Kolihestvo klikov  # noqa: E501

        :param clicks: The clicks of this InlineResponse20024Nm.  # noqa: E501
        :type: int
        """

        self._clicks = clicks

    @property
    def ctr(self):
        """Gets the ctr of this InlineResponse20024Nm.  # noqa: E501

        Pokazatel klikabelnosti.<br> Otnohenie hisla klikov k kolihestvu pokazov. Vyrahaetsa v procentah.   # noqa: E501

        :return: The ctr of this InlineResponse20024Nm.  # noqa: E501
        :rtype: float
        """
        return self._ctr

    @ctr.setter
    def ctr(self, ctr):
        """Sets the ctr of this InlineResponse20024Nm.

        Pokazatel klikabelnosti.<br> Otnohenie hisla klikov k kolihestvu pokazov. Vyrahaetsa v procentah.   # noqa: E501

        :param ctr: The ctr of this InlineResponse20024Nm.  # noqa: E501
        :type: float
        """

        self._ctr = ctr

    @property
    def cpc(self):
        """Gets the cpc of this InlineResponse20024Nm.  # noqa: E501

        Srednaa stoimost klika, ₽.  # noqa: E501

        :return: The cpc of this InlineResponse20024Nm.  # noqa: E501
        :rtype: float
        """
        return self._cpc

    @cpc.setter
    def cpc(self, cpc):
        """Sets the cpc of this InlineResponse20024Nm.

        Srednaa stoimost klika, ₽.  # noqa: E501

        :param cpc: The cpc of this InlineResponse20024Nm.  # noqa: E501
        :type: float
        """

        self._cpc = cpc

    @property
    def sum(self):
        """Gets the sum of this InlineResponse20024Nm.  # noqa: E501

        Zatraty, ₽.  # noqa: E501

        :return: The sum of this InlineResponse20024Nm.  # noqa: E501
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this InlineResponse20024Nm.

        Zatraty, ₽.  # noqa: E501

        :param sum: The sum of this InlineResponse20024Nm.  # noqa: E501
        :type: float
        """

        self._sum = sum

    @property
    def atbs(self):
        """Gets the atbs of this InlineResponse20024Nm.  # noqa: E501

        Kolihestvo dobavlenii tovarov v korzinu  # noqa: E501

        :return: The atbs of this InlineResponse20024Nm.  # noqa: E501
        :rtype: int
        """
        return self._atbs

    @atbs.setter
    def atbs(self, atbs):
        """Sets the atbs of this InlineResponse20024Nm.

        Kolihestvo dobavlenii tovarov v korzinu  # noqa: E501

        :param atbs: The atbs of this InlineResponse20024Nm.  # noqa: E501
        :type: int
        """

        self._atbs = atbs

    @property
    def orders(self):
        """Gets the orders of this InlineResponse20024Nm.  # noqa: E501

        Kolihestvo zakazov.  # noqa: E501

        :return: The orders of this InlineResponse20024Nm.  # noqa: E501
        :rtype: int
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this InlineResponse20024Nm.

        Kolihestvo zakazov.  # noqa: E501

        :param orders: The orders of this InlineResponse20024Nm.  # noqa: E501
        :type: int
        """

        self._orders = orders

    @property
    def cr(self):
        """Gets the cr of this InlineResponse20024Nm.  # noqa: E501

        CR(conversion rate) — eto otnohenie kolihestva zakazov k obhemu kolihestvu posehenii kampanii.   # noqa: E501

        :return: The cr of this InlineResponse20024Nm.  # noqa: E501
        :rtype: int
        """
        return self._cr

    @cr.setter
    def cr(self, cr):
        """Sets the cr of this InlineResponse20024Nm.

        CR(conversion rate) — eto otnohenie kolihestva zakazov k obhemu kolihestvu posehenii kampanii.   # noqa: E501

        :param cr: The cr of this InlineResponse20024Nm.  # noqa: E501
        :type: int
        """

        self._cr = cr

    @property
    def shks(self):
        """Gets the shks of this InlineResponse20024Nm.  # noqa: E501

        Kolihestvo zakazannyh tovarov, ht.  # noqa: E501

        :return: The shks of this InlineResponse20024Nm.  # noqa: E501
        :rtype: int
        """
        return self._shks

    @shks.setter
    def shks(self, shks):
        """Sets the shks of this InlineResponse20024Nm.

        Kolihestvo zakazannyh tovarov, ht.  # noqa: E501

        :param shks: The shks of this InlineResponse20024Nm.  # noqa: E501
        :type: int
        """

        self._shks = shks

    @property
    def sum_price(self):
        """Gets the sum_price of this InlineResponse20024Nm.  # noqa: E501

        Zakazov na summu, ₽  # noqa: E501

        :return: The sum_price of this InlineResponse20024Nm.  # noqa: E501
        :rtype: int
        """
        return self._sum_price

    @sum_price.setter
    def sum_price(self, sum_price):
        """Sets the sum_price of this InlineResponse20024Nm.

        Zakazov na summu, ₽  # noqa: E501

        :param sum_price: The sum_price of this InlineResponse20024Nm.  # noqa: E501
        :type: int
        """

        self._sum_price = sum_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20024Nm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20024Nm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
