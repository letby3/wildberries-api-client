# coding: utf-8

"""
    Opisanie API Prodvihenie

    Sinhronizacia dannyh iz bd proishodit raz v 3 minuty.  <br>Izmenenie statusa proishodit raz v 1 minutu. Vnutri etogo intervala budet sohraneno poslednee deistvie po izmeneniu statusa. <br>Izmenenie stavki proishodit raz v 30 sekund. Vnutri etogo intervala budet sohraneno poslednee deistvie po izmeneniu stavki.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.promotion.api_client import ApiClient


class UpravlenieParametramiKampaniiVPoiskeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adv_v0_active_get(self, id, subject_id, status, **kwargs):  # noqa: E501
        """Izmenenie aktivnosti predmetnoi gruppy dla kampanii v poiske  # noqa: E501

        Metod pozvolaet izmenit aktivnost predmetnoi gruppy dla kampanii v poiske.<br> Izmenenie aktivnosti dostupno tolko dla kampanii v statuse 9 ili 11.<br> Dopuskaetsa maksimum 5 zaprosov v sekundu.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_active_get(id, subject_id, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifikator kampanii (required)
        :param int subject_id: Identifikator predmetnoi gruppy, dla kotoroi menaetsa aktivnost (required)
        :param str status: Novoe sostoanie (`true` - sdelat gruppu aktivnoi ili `false` - sdelat gruppu neaktivnoi) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_active_get_with_http_info(id, subject_id, status, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_active_get_with_http_info(id, subject_id, status, **kwargs)  # noqa: E501
            return data

    def adv_v0_active_get_with_http_info(self, id, subject_id, status, **kwargs):  # noqa: E501
        """Izmenenie aktivnosti predmetnoi gruppy dla kampanii v poiske  # noqa: E501

        Metod pozvolaet izmenit aktivnost predmetnoi gruppy dla kampanii v poiske.<br> Izmenenie aktivnosti dostupno tolko dla kampanii v statuse 9 ili 11.<br> Dopuskaetsa maksimum 5 zaprosov v sekundu.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_active_get_with_http_info(id, subject_id, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifikator kampanii (required)
        :param int subject_id: Identifikator predmetnoi gruppy, dla kotoroi menaetsa aktivnost (required)
        :param str status: Novoe sostoanie (`true` - sdelat gruppu aktivnoi ili `false` - sdelat gruppu neaktivnoi) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'subject_id', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_active_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v0_active_get`")  # noqa: E501
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params or
                params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `adv_v0_active_get`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `adv_v0_active_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'subject_id' in params:
            query_params.append(('subjectId', params['subject_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/active', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_search_set_excluded_post(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz iz poiska dla kampanii v poiske  # noqa: E501

        Metod pozvolaet ustanavlivat/udalat minus-frazy iz poiska. <br> Otpravka pustogo massiva udalaet vse minus-frazy iz poiska iz kampanii. <br> Dopuskaetsa maksimum 2 zaprosa v sekundu.         # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_excluded_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetexcludedBody body: (required)
        :param int id: Identifikator kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_search_set_excluded_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_search_set_excluded_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def adv_v1_search_set_excluded_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz iz poiska dla kampanii v poiske  # noqa: E501

        Metod pozvolaet ustanavlivat/udalat minus-frazy iz poiska. <br> Otpravka pustogo massiva udalaet vse minus-frazy iz poiska iz kampanii. <br> Dopuskaetsa maksimum 2 zaprosa v sekundu.         # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_excluded_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetexcludedBody body: (required)
        :param int id: Identifikator kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_search_set_excluded_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_search_set_excluded_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_search_set_excluded_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/search/set-excluded', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_search_set_phrase_post(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz frazovogo sootvetstvia dla kampanii v poiske  # noqa: E501

        Metod pozvolaet ustanavlivat/udalat minus-frazy frazovogo sootvetstvia. <br> Otpravka pustogo massiva udalaet vse minus-frazy frazovogo sootvetstvia iz kampanii. <br> Dopuskaetsa maksimum 2 zaprosa v sekundu.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_phrase_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetphraseBody body: (required)
        :param int id: Identifikator kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_search_set_phrase_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_search_set_phrase_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def adv_v1_search_set_phrase_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz frazovogo sootvetstvia dla kampanii v poiske  # noqa: E501

        Metod pozvolaet ustanavlivat/udalat minus-frazy frazovogo sootvetstvia. <br> Otpravka pustogo massiva udalaet vse minus-frazy frazovogo sootvetstvia iz kampanii. <br> Dopuskaetsa maksimum 2 zaprosa v sekundu.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_phrase_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetphraseBody body: (required)
        :param int id: Identifikator kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_search_set_phrase_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_search_set_phrase_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_search_set_phrase_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/search/set-phrase', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_search_set_plus_get(self, id, **kwargs):  # noqa: E501
        """Upravlenie aktivnostu fiksirovannyh fraz u kampanii v poiske  # noqa: E501

        Metod pozvolaet izmenat aktivnost fiksirovannyh fraz u kampanii v poiske.  <br> Dopuskaetsa 1 zapros v 500 millisekund.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_plus_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifikator kampanii (required)
        :param bool fixed: Novoe sostoanie (`false` - sdelat neaktivnymi, `true` - sdelat aktivnymi)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_search_set_plus_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_search_set_plus_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def adv_v1_search_set_plus_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Upravlenie aktivnostu fiksirovannyh fraz u kampanii v poiske  # noqa: E501

        Metod pozvolaet izmenat aktivnost fiksirovannyh fraz u kampanii v poiske.  <br> Dopuskaetsa 1 zapros v 500 millisekund.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_plus_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifikator kampanii (required)
        :param bool fixed: Novoe sostoanie (`false` - sdelat neaktivnymi, `true` - sdelat aktivnymi)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fixed']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_search_set_plus_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_search_set_plus_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'fixed' in params:
            query_params.append(('fixed', params['fixed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/search/set-plus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_search_set_plus_post(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie fiksirovannyh fraz u kampanii v poiske  # noqa: E501

        Metod pozvolaet ustanavlivat i udalat fiksirovannye frazy. <br> Otpravka pustogo massiva udalaet vse fiksirovannye frazy i otkluhaet aktivnost fiksirovannyh fraz v kampanii.<br> <br> Dopuskaetsa 1 zapros v 500 millisekund.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_plus_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetplusBody body: (required)
        :param int id: Identifikator kampanii (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_search_set_plus_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_search_set_plus_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def adv_v1_search_set_plus_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie fiksirovannyh fraz u kampanii v poiske  # noqa: E501

        Metod pozvolaet ustanavlivat i udalat fiksirovannye frazy. <br> Otpravka pustogo massiva udalaet vse fiksirovannye frazy i otkluhaet aktivnost fiksirovannyh fraz v kampanii.<br> <br> Dopuskaetsa 1 zapros v 500 millisekund.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_plus_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetplusBody body: (required)
        :param int id: Identifikator kampanii (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_search_set_plus_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_search_set_plus_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_search_set_plus_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/search/set-plus', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_search_set_strong_post(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz tohnogo sootvetstvia dla kampanii v poiske  # noqa: E501

        Metod pozvolaet ustanavlivat/udalat minus-frazy tohnogo sootvetstvia. <br> Otpravka pustogo massiva udalaet vse minus-frazy tohnogo sootvetstvia iz kampanii. <br> Dopuskaetsa maksimum 2 zaprosa v sekundu.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_strong_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetstrongBody body: (required)
        :param int id: Identifikator kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_search_set_strong_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_search_set_strong_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def adv_v1_search_set_strong_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz tohnogo sootvetstvia dla kampanii v poiske  # noqa: E501

        Metod pozvolaet ustanavlivat/udalat minus-frazy tohnogo sootvetstvia. <br> Otpravka pustogo massiva udalaet vse minus-frazy tohnogo sootvetstvia iz kampanii. <br> Dopuskaetsa maksimum 2 zaprosa v sekundu.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_strong_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetstrongBody body: (required)
        :param int id: Identifikator kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_search_set_strong_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_search_set_strong_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_search_set_strong_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/search/set-strong', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_search_supplier_products_get(self, **kwargs):  # noqa: E501
        """Spisok tovarov dla kampanii v poiske  # noqa: E501

        Metod vozvrahaet spisok tovarov, kotorye est v nalihii. Eti tovary mohno dobavit v kampaniu. <span class=\"newM\">new</span> <br> Dopuskaetsa  1 zapros v 12 sekund.<br>  htoby poluhit vse tovary, kotorye est v nalihii, neobhodimo otpravit zapros bez parametra <code>subject</code>.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_supplier_products_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subject: ID predmeta
        :return: list[InlineResponse20027]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_search_supplier_products_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_search_supplier_products_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def adv_v1_search_supplier_products_get_with_http_info(self, **kwargs):  # noqa: E501
        """Spisok tovarov dla kampanii v poiske  # noqa: E501

        Metod vozvrahaet spisok tovarov, kotorye est v nalihii. Eti tovary mohno dobavit v kampaniu. <span class=\"newM\">new</span> <br> Dopuskaetsa  1 zapros v 12 sekund.<br>  htoby poluhit vse tovary, kotorye est v nalihii, neobhodimo otpravit zapros bez parametra <code>subject</code>.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_supplier_products_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subject: ID predmeta
        :return: list[InlineResponse20027]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_search_supplier_products_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subject' in params:
            query_params.append(('subject', params['subject']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/search/supplier-products', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20027]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_search_supplier_subjects_get(self, **kwargs):  # noqa: E501
        """Spisok predmetov dla kampanii v poiske  # noqa: E501

        Metod pozvolaet poluhat spisok predmetov prodavca i kolihestvo artikulov WB po kahdomu predmetu.   <span class=\"newM\">new</span> <br> Dopuskaetsa 1 zapros v 12 sekund.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_supplier_subjects_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[InlineResponse20026]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_search_supplier_subjects_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_search_supplier_subjects_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def adv_v1_search_supplier_subjects_get_with_http_info(self, **kwargs):  # noqa: E501
        """Spisok predmetov dla kampanii v poiske  # noqa: E501

        Metod pozvolaet poluhat spisok predmetov prodavca i kolihestvo artikulov WB po kahdomu predmetu.   <span class=\"newM\">new</span> <br> Dopuskaetsa 1 zapros v 12 sekund.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_supplier_subjects_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[InlineResponse20026]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_search_supplier_subjects_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/search/supplier-subjects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20026]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
