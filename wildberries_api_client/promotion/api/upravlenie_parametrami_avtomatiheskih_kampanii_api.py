# coding: utf-8

"""
    Opisanie API Prodvihenie

    Sinhronizacia dannyh iz bd proishodit raz v 3 minuty.  <br>Izmenenie statusa proishodit raz v 1 minutu. Vnutri etogo intervala budet sohraneno poslednee deistvie po izmeneniu statusa. <br>Izmenenie stavki proishodit raz v 30 sekund. Vnutri etogo intervala budet sohraneno poslednee deistvie po izmeneniu stavki.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.promotion.api_client import ApiClient


class UpravlenieParametramiAvtomatiheskihKampaniiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adv_v1_auto_active_post(self, body, id, **kwargs):  # noqa: E501
        """Upravlenie zonami pokazov v avtomatiheskoi kampanii  # noqa: E501

        Metod pozvolaet izmenat aktivnost zon pokazov. <br> Dopuskaetsa 1 zapros v sekundu.<br> Vy mohete osuhestvlat pokazy tovarov vo vseh zonah libo vyborohno.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_auto_active_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoActiveBody body: (required)
        :param int id: Identifikator kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_auto_active_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_auto_active_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def adv_v1_auto_active_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Upravlenie zonami pokazov v avtomatiheskoi kampanii  # noqa: E501

        Metod pozvolaet izmenat aktivnost zon pokazov. <br> Dopuskaetsa 1 zapros v sekundu.<br> Vy mohete osuhestvlat pokazy tovarov vo vseh zonah libo vyborohno.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_auto_active_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoActiveBody body: (required)
        :param int id: Identifikator kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_auto_active_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_auto_active_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_auto_active_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/auto/active', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_auto_getnmtoadd_get(self, id, **kwargs):  # noqa: E501
        """Spisok nomenklatur dla avtomatiheskoi kampanii  # noqa: E501

        Metod pozvolaet poluhat spisok nomenklatur, dostupnyh dla dobavlenia v kampaniu. <br> Dopuskaetsa 1 zapros v sekundu.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_auto_getnmtoadd_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifikator kampanii (required)
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_auto_getnmtoadd_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_auto_getnmtoadd_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def adv_v1_auto_getnmtoadd_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Spisok nomenklatur dla avtomatiheskoi kampanii  # noqa: E501

        Metod pozvolaet poluhat spisok nomenklatur, dostupnyh dla dobavlenia v kampaniu. <br> Dopuskaetsa 1 zapros v sekundu.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_auto_getnmtoadd_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifikator kampanii (required)
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_auto_getnmtoadd_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_auto_getnmtoadd_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/auto/getnmtoadd', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_auto_set_excluded_post(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz dla avtomatiheskoi kampanii  # noqa: E501

        Metod pozvolaet ustanavlivat ili udalat minus frazy. <span class=\"newM\">new</span><br> <br> Dopuskaetsa 1 zapros v 6 sekund. <br> Otpravka pustogo massiva udalaet vse minus-frazy iz kampanii.<br>          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_auto_set_excluded_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoSetexcludedBody body: (required)
        :param int id: Identifikator kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_auto_set_excluded_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_auto_set_excluded_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def adv_v1_auto_set_excluded_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz dla avtomatiheskoi kampanii  # noqa: E501

        Metod pozvolaet ustanavlivat ili udalat minus frazy. <span class=\"newM\">new</span><br> <br> Dopuskaetsa 1 zapros v 6 sekund. <br> Otpravka pustogo massiva udalaet vse minus-frazy iz kampanii.<br>          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_auto_set_excluded_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoSetexcludedBody body: (required)
        :param int id: Identifikator kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_auto_set_excluded_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_auto_set_excluded_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_auto_set_excluded_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/auto/set-excluded', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_auto_updatenm_post(self, body, id, **kwargs):  # noqa: E501
        """Izmenenie spiska nomenklatur v avtomatiheskoi kampanii  # noqa: E501

        Metod pozvolaet dobavlat i udalat nomenklatury. <br> Dopuskaetsa 1 zapros v sekundu.<br> `Vahno`: Dobavit mohno tolko te nomenklatury, kotorye vernutsa v otvete metoda <b>\"Spisok nomenklatur dla avtomatiheskoi kampanii\"</b>.<br> Udalit edinstvennuu nomenklaturu iz kampanii nelza.<br> Proverki po parametru delete ne predusmotreno.<br> Esli prihel otvet so status-kodom 200, a izmenenii ne proizohlo, to proverte zapros na sootvetstvie dokumentacii.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_auto_updatenm_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoUpdatenmBody body: (required)
        :param int id: Identifikator kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_auto_updatenm_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_auto_updatenm_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def adv_v1_auto_updatenm_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Izmenenie spiska nomenklatur v avtomatiheskoi kampanii  # noqa: E501

        Metod pozvolaet dobavlat i udalat nomenklatury. <br> Dopuskaetsa 1 zapros v sekundu.<br> `Vahno`: Dobavit mohno tolko te nomenklatury, kotorye vernutsa v otvete metoda <b>\"Spisok nomenklatur dla avtomatiheskoi kampanii\"</b>.<br> Udalit edinstvennuu nomenklaturu iz kampanii nelza.<br> Proverki po parametru delete ne predusmotreno.<br> Esli prihel otvet so status-kodom 200, a izmenenii ne proizohlo, to proverte zapros na sootvetstvie dokumentacii.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_auto_updatenm_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoUpdatenmBody body: (required)
        :param int id: Identifikator kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_auto_updatenm_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_auto_updatenm_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_auto_updatenm_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/auto/updatenm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
