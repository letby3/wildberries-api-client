# coding: utf-8

"""
    Opisanie API Marketplace

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.marketplace.api_client import ApiClient


class SborohnyeZadaniaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v3_files_orders_external_stickers_post(self, **kwargs):  # noqa: E501
        """Poluhit spisok ssylok na etiketki dla sborohnyh zadanii, kotorye trebuutsa pri krossbordere  # noqa: E501

        Vozvrahaet spisok ssylok na etiketki dla sborohnyh zadanii, kotorye trebuutsa pri krossbordere.  **Ogranihenia pri rabote s metodom**: - Nelza zaprosit bolhe 100 etiketok za raz (ne bolee 100 identifikatorov sborohnyh zadanii v zaprose). - Metod vozvrahaet etiketki tolko dla sborohnyh zadanii, nahodahihsa na sborke (v statuse **confirm**).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_files_orders_external_stickers_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersExternalstickersBody body:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_files_orders_external_stickers_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_files_orders_external_stickers_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v3_files_orders_external_stickers_post_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit spisok ssylok na etiketki dla sborohnyh zadanii, kotorye trebuutsa pri krossbordere  # noqa: E501

        Vozvrahaet spisok ssylok na etiketki dla sborohnyh zadanii, kotorye trebuutsa pri krossbordere.  **Ogranihenia pri rabote s metodom**: - Nelza zaprosit bolhe 100 etiketok za raz (ne bolee 100 identifikatorov sborohnyh zadanii v zaprose). - Metod vozvrahaet etiketki tolko dla sborohnyh zadanii, nahodahihsa na sborke (v statuse **confirm**).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_files_orders_external_stickers_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersExternalstickersBody body:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_files_orders_external_stickers_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/files/orders/external-stickers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_get(self, limit, next, **kwargs):  # noqa: E501
        """Poluhit informaciu po sborohnym zadaniam  # noqa: E501

        Vozvrahaet informaciu po sborohnym zadaniam bez ih aktualnogo statusa. <br> Dannye po sborohnomu zadaniu, vozvrahauhiesa v dannom metode, ne menautsa. <br> Rekomenduetsa ispolzovat dla poluhenia istoriheskih dannyh.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_get(limit, next, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Parametr paginacii. Ustanavlivaet predelnoe kolihestvo vozvrahaemyh dannyh. (required)
        :param int next: Parametr paginacii. Ustanavlivaet znahenie, s kotorogo nado poluhit sleduuhii paket dannyh. Dla poluhenia polnogo spiska dannyh dolhen byt raven 0 v pervom zaprose. Dla sleduuhih zaprosov neobhodimo brat znahenia iz odnoimennogo pola v otvete. (required)
        :param int date_from: Data nahala perioda v formate Unix timestamp. Neobazatelnyi parametr.
        :param int date_to: Data konca perioda v formate Unix timestamp. Neobazatelnyi parametr.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_get_with_http_info(limit, next, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_get_with_http_info(limit, next, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_get_with_http_info(self, limit, next, **kwargs):  # noqa: E501
        """Poluhit informaciu po sborohnym zadaniam  # noqa: E501

        Vozvrahaet informaciu po sborohnym zadaniam bez ih aktualnogo statusa. <br> Dannye po sborohnomu zadaniu, vozvrahauhiesa v dannom metode, ne menautsa. <br> Rekomenduetsa ispolzovat dla poluhenia istoriheskih dannyh.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_get_with_http_info(limit, next, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Parametr paginacii. Ustanavlivaet predelnoe kolihestvo vozvrahaemyh dannyh. (required)
        :param int next: Parametr paginacii. Ustanavlivaet znahenie, s kotorogo nado poluhit sleduuhii paket dannyh. Dla poluhenia polnogo spiska dannyh dolhen byt raven 0 v pervom zaprose. Dla sleduuhih zaprosov neobhodimo brat znahenia iz odnoimennogo pola v otvete. (required)
        :param int date_from: Data nahala perioda v formate Unix timestamp. Neobazatelnyi parametr.
        :param int date_to: Data konca perioda v formate Unix timestamp. Neobazatelnyi parametr.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'next', 'date_from', 'date_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `api_v3_orders_get`")  # noqa: E501
        # verify the required parameter 'next' is set
        if ('next' not in params or
                params['next'] is None):
            raise ValueError("Missing the required parameter `next` when calling `api_v3_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'next' in params:
            query_params.append(('next', params['next']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_new_get(self, **kwargs):  # noqa: E501
        """Poluhit spisok novyh sborohnyh zadanii  # noqa: E501

        Vozvrahaet spisok vseh novyh sborohnyh zadanii u prodavca na dannyi moment.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_new_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_new_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_new_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v3_orders_new_get_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit spisok novyh sborohnyh zadanii  # noqa: E501

        Vozvrahaet spisok vseh novyh sborohnyh zadanii u prodavca na dannyi moment.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_new_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_new_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/new', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_cancel_patch(self, order_id, **kwargs):  # noqa: E501
        """Otmenit sborohnoe zadanie  # noqa: E501

        Perevodit sborohnoe zadanie v status **cancel** (\"Otmeneno prodavcom\").  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_cancel_patch(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_cancel_patch_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_cancel_patch_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_cancel_patch_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Otmenit sborohnoe zadanie  # noqa: E501

        Perevodit sborohnoe zadanie v status **cancel** (\"Otmeneno prodavcom\").  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_cancel_patch_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_cancel_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_cancel_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/cancel', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_delete(self, order_id, **kwargs):  # noqa: E501
        """Udalit metadannye sborohnogo zadania  # noqa: E501

        Udalaet znahenie metadannyh zakaza dla peredannogo kluha.  <br> Vozmohnye metadannye: <br> **imei** <br> **uin** <br> **gtin** <br> **sgtin** <span class=\"newM\">new</span><br> Peredaetsa tolko odno znahenie.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_delete(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param str key: Nazvanie metadannyh dla udalenia (**imei**, **uin**, **gtin**, **sgtin**). Peredaetsa tolko odno znahenie.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_delete_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_delete_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_delete_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Udalit metadannye sborohnogo zadania  # noqa: E501

        Udalaet znahenie metadannyh zakaza dla peredannogo kluha.  <br> Vozmohnye metadannye: <br> **imei** <br> **uin** <br> **gtin** <br> **sgtin** <span class=\"newM\">new</span><br> Peredaetsa tolko odno znahenie.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_delete_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param str key: Nazvanie metadannyh dla udalenia (**imei**, **uin**, **gtin**, **sgtin**). Peredaetsa tolko odno znahenie.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_get(self, order_id, **kwargs):  # noqa: E501
        """Poluhit metadannye sborohnogo zadania  # noqa: E501

        Vozvrahaet metadannye zakaza. <br> Vozmohnye metadannye: <br> **imei** <br> **uin** <br> **gtin** <br> **sgtin**   <br> V otvete metoda vozvrahautsa metadannye, dostupnye dla sborohnogo zadania. Esli otvet vernulsa s pustoi strukturoi **meta**, znahit u sborohnogo zadania net metadannyh, i dobavlenie ih ne dostupno.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_get(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_get_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_get_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_get_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Poluhit metadannye sborohnogo zadania  # noqa: E501

        Vozvrahaet metadannye zakaza. <br> Vozmohnye metadannye: <br> **imei** <br> **uin** <br> **gtin** <br> **sgtin**   <br> V otvete metoda vozvrahautsa metadannye, dostupnye dla sborohnogo zadania. Esli otvet vernulsa s pustoi strukturoi **meta**, znahit u sborohnogo zadania net metadannyh, i dobavlenie ih ne dostupno.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_get_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_gtin_put(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem GTIN  # noqa: E501

        Obnovlaet GTIN sborohnogo zadania. U odnogo sborohnogo zadania mohet byt tolko odin GTIN. Dobavlat markirovku mohno tolko dla zakazov v statuse `confirm` i dostavka kotoryh osuhestvlaetsa silami Wildberries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_gtin_put(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaGtinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_gtin_put_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_gtin_put_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_gtin_put_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem GTIN  # noqa: E501

        Obnovlaet GTIN sborohnogo zadania. U odnogo sborohnogo zadania mohet byt tolko odin GTIN. Dobavlat markirovku mohno tolko dla zakazov v statuse `confirm` i dostavka kotoryh osuhestvlaetsa silami Wildberries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_gtin_put_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaGtinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_gtin_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_gtin_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta/gtin', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_imei_put(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem IMEI  # noqa: E501

        Obnovlaet IMEI sborohnogo zadania. U odnogo sborohnogo zadania mohet byt tolko odin IMEI. DDobavlat markirovku mohno tolko dla zakazov v statuse `confirm` i dostavka kotoryh osuhestvlaetsa silami Wildberries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_imei_put(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaImeiBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_imei_put_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_imei_put_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_imei_put_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem IMEI  # noqa: E501

        Obnovlaet IMEI sborohnogo zadania. U odnogo sborohnogo zadania mohet byt tolko odin IMEI. DDobavlat markirovku mohno tolko dla zakazov v statuse `confirm` i dostavka kotoryh osuhestvlaetsa silami Wildberries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_imei_put_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaImeiBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_imei_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_imei_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta/imei', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_sgtin_put(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem KiZ (markirovku hestnogo znaka)  # noqa: E501

        Metod pozvolaet zakrepit za sborohnym zadaniem KiZ (markirovku hestnogo znaka). <span class=\"newM\">new</span> <br>  Zakreplenie KiZ za sborohnym zadaniem vozmohno tolko v sluhae, esli eto pole vozvrahaetsa v otvete metoda **Poluhit metadannye sborohnogo zadania**, a sborohnoe zadanie nahoditsa v statuse `confirm`. <br> <br> Poluhit zagruhennye KiZ mohno metodom <b>Poluhit metadannye sborohnogo zadania</b> <br> S pravilami raboty s KiZ mohno oznakomitsa tut: https://hestnyiznak.rf <br> <br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_sgtin_put(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaSgtinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_sgtin_put_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_sgtin_put_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_sgtin_put_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem KiZ (markirovku hestnogo znaka)  # noqa: E501

        Metod pozvolaet zakrepit za sborohnym zadaniem KiZ (markirovku hestnogo znaka). <span class=\"newM\">new</span> <br>  Zakreplenie KiZ za sborohnym zadaniem vozmohno tolko v sluhae, esli eto pole vozvrahaetsa v otvete metoda **Poluhit metadannye sborohnogo zadania**, a sborohnoe zadanie nahoditsa v statuse `confirm`. <br> <br> Poluhit zagruhennye KiZ mohno metodom <b>Poluhit metadannye sborohnogo zadania</b> <br> S pravilami raboty s KiZ mohno oznakomitsa tut: https://hestnyiznak.rf <br> <br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_sgtin_put_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaSgtinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_sgtin_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_sgtin_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta/sgtin', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_uin_put(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem UIN (unikalnyi identifikacionnyi nomer)  # noqa: E501

        Obnovlaet UIN sborohnogo zadania. U odnogo sborohnogo zadania mohet byt tolko odin UIN. Dobavlat markirovku mohno tolko dla zakazov v statuse `confirm` i dostavka kotoryh osuhestvlaetsa silami Wildberries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_uin_put(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaUinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_uin_put_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_uin_put_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_uin_put_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem UIN (unikalnyi identifikacionnyi nomer)  # noqa: E501

        Obnovlaet UIN sborohnogo zadania. U odnogo sborohnogo zadania mohet byt tolko odin UIN. Dobavlat markirovku mohno tolko dla zakazov v statuse `confirm` i dostavka kotoryh osuhestvlaetsa silami Wildberries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_uin_put_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaUinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_uin_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_uin_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta/uin', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_status_post(self, **kwargs):  # noqa: E501
        """Poluhit statusy sborohnyh zadanii  # noqa: E501

        Vozvrahaet statusy sborohnyh zadanii po peredannomu spisku identifikatorov sborohnyh zadanii.  **supplierStatus** - status sborohnogo zadania, triggerom izmenenia kotorogo avlaetsa sam prodavec.<br> Vozmohny sleduuhie znahenia dannogo pola: | Status   | Opisanie            | Kak perevesti sborohnoe zadanie v dannyi status | | -------  | ---------           | --------------------------------------| | new      | Novoe sborohnoe zadanie |           | confirm  | Na sborke            | Pri dobavlenii sborohnogo zadania k postavke **PATCH** */api/v3/supplies/{supplyId}/orders/{orderId}* | complete | V dostavke           | Pri perevode v dostavku sootvetstvuuhei postavki **PATCH** */api/v3/supplies/{supplyId}/deliver* | cancel   | Otmeneno prodavcom   | **PATCH** */api/v3/orders/{orderId}/cancel*   **wbStatus** - status sborohnogo zadania v sisteme Wildberries.<br> Vozmohny sleduuhie znahenia dannogo pola: - **waiting** - sborohnoe zadanie v rabote - **sorted** - sborohnoe zadanie otsortirovano - **sold** - sborohnoe zadanie poluheno pokupatelem - **canceled** - otmena sborohnogo zadania - **canceled_by_client** - pokupatel otmenil zakaz pri poluhenii - **declined_by_client** - pokupatel otmenil zakaz v pervyi hac <span class=\"newM\">new</span> <br> Otmena dostupna pokupatelu v pervyi has s momenta zakaza, esli zakaz ne pereveden na sborku - **defect** - otmena sborohnogo zadania po prihine braka - **ready_for_pickup** - sborohnoe zadanie pribylo na PVZ   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_status_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersStatusBody body:
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_status_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_status_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v3_orders_status_post_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit statusy sborohnyh zadanii  # noqa: E501

        Vozvrahaet statusy sborohnyh zadanii po peredannomu spisku identifikatorov sborohnyh zadanii.  **supplierStatus** - status sborohnogo zadania, triggerom izmenenia kotorogo avlaetsa sam prodavec.<br> Vozmohny sleduuhie znahenia dannogo pola: | Status   | Opisanie            | Kak perevesti sborohnoe zadanie v dannyi status | | -------  | ---------           | --------------------------------------| | new      | Novoe sborohnoe zadanie |           | confirm  | Na sborke            | Pri dobavlenii sborohnogo zadania k postavke **PATCH** */api/v3/supplies/{supplyId}/orders/{orderId}* | complete | V dostavke           | Pri perevode v dostavku sootvetstvuuhei postavki **PATCH** */api/v3/supplies/{supplyId}/deliver* | cancel   | Otmeneno prodavcom   | **PATCH** */api/v3/orders/{orderId}/cancel*   **wbStatus** - status sborohnogo zadania v sisteme Wildberries.<br> Vozmohny sleduuhie znahenia dannogo pola: - **waiting** - sborohnoe zadanie v rabote - **sorted** - sborohnoe zadanie otsortirovano - **sold** - sborohnoe zadanie poluheno pokupatelem - **canceled** - otmena sborohnogo zadania - **canceled_by_client** - pokupatel otmenil zakaz pri poluhenii - **declined_by_client** - pokupatel otmenil zakaz v pervyi hac <span class=\"newM\">new</span> <br> Otmena dostupna pokupatelu v pervyi has s momenta zakaza, esli zakaz ne pereveden na sborku - **defect** - otmena sborohnogo zadania po prihine braka - **ready_for_pickup** - sborohnoe zadanie pribylo na PVZ   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_status_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersStatusBody body:
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_status_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_stickers_post(self, type, width, height, **kwargs):  # noqa: E501
        """Poluhit etiketki dla sborohnyh zadanii  # noqa: E501

        Vozvrahaet spisok etiketok po peredannomu massivu sborohnyh zadanii. Mohno zaprosit etiketku v formate svg, zplv (vertikalnyi), zplh (gorizontalnyi), png.  **Ogranihenia pri rabote s metodom**: - Nelza zaprosit bolhe 100 etiketok za raz (ne bolee 100 identifikatorov sborohnyh zadanii v zaprose). - Metod vozvrahaet etiketki tolko dla sborohnyh zadanii, nahodahihsa na sborke (v statuse **confirm**). - Dostupnye razmery: <dd>580x400 pikselei, pri parametrah width = 58, height = 40</dd> <dd>400x300 pikselei, pri parametrah width = 40, height = 30</dd>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_stickers_post(type, width, height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Tip etiketki (required)
        :param int width: hirina etiketki (required)
        :param int height: Vysota etiketki (required)
        :param OrdersStickersBody body:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_stickers_post_with_http_info(type, width, height, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_stickers_post_with_http_info(type, width, height, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_stickers_post_with_http_info(self, type, width, height, **kwargs):  # noqa: E501
        """Poluhit etiketki dla sborohnyh zadanii  # noqa: E501

        Vozvrahaet spisok etiketok po peredannomu massivu sborohnyh zadanii. Mohno zaprosit etiketku v formate svg, zplv (vertikalnyi), zplh (gorizontalnyi), png.  **Ogranihenia pri rabote s metodom**: - Nelza zaprosit bolhe 100 etiketok za raz (ne bolee 100 identifikatorov sborohnyh zadanii v zaprose). - Metod vozvrahaet etiketki tolko dla sborohnyh zadanii, nahodahihsa na sborke (v statuse **confirm**). - Dostupnye razmery: <dd>580x400 pikselei, pri parametrah width = 58, height = 40</dd> <dd>400x300 pikselei, pri parametrah width = 40, height = 30</dd>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_stickers_post_with_http_info(type, width, height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Tip etiketki (required)
        :param int width: hirina etiketki (required)
        :param int height: Vysota etiketki (required)
        :param OrdersStickersBody body:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'width', 'height', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_stickers_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `api_v3_orders_stickers_post`")  # noqa: E501
        # verify the required parameter 'width' is set
        if ('width' not in params or
                params['width'] is None):
            raise ValueError("Missing the required parameter `width` when calling `api_v3_orders_stickers_post`")  # noqa: E501
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `api_v3_orders_stickers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'width' in params:
            query_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            query_params.append(('height', params['height']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/stickers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_orders_reshipment_get(self, **kwargs):  # noqa: E501
        """Poluhit vse sborohnye zadania na povtornuu otgruzku  # noqa: E501

        Vozvrahaet vse sborohnye zadania, trebuuhie povtornoi otgruzki. <span class=\"newM\">new</span>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_orders_reshipment_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_orders_reshipment_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_orders_reshipment_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v3_supplies_orders_reshipment_get_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit vse sborohnye zadania na povtornuu otgruzku  # noqa: E501

        Vozvrahaet vse sborohnye zadania, trebuuhie povtornoi otgruzki. <span class=\"newM\">new</span>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_orders_reshipment_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_orders_reshipment_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/orders/reshipment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
