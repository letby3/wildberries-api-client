# coding: utf-8

"""
    Opisanie API Marketplace

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.marketplace.api_client import ApiClient


class PostavkiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v3_supplies_get(self, limit, next, **kwargs):  # noqa: E501
        """Poluhit spisok postavok  # noqa: E501

        Vozvrahaet spisok postavok.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_get(limit, next, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Parametr paginacii. Ustanavlivaet predelnoe kolihestvo vozvrahaemyh dannyh. (required)
        :param int next: Parametr paginacii. Ustanavlivaet znahenie, s kotorogo nado poluhit sleduuhii paket dannyh. Dla poluhenia polnogo spiska dannyh dolhen byt raven 0 v pervom zaprose. Dla sleduuhih zaprosov neobhodimo brat znahenia iz odnoimennogo pola v otvete. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_get_with_http_info(limit, next, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_get_with_http_info(limit, next, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_get_with_http_info(self, limit, next, **kwargs):  # noqa: E501
        """Poluhit spisok postavok  # noqa: E501

        Vozvrahaet spisok postavok.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_get_with_http_info(limit, next, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Parametr paginacii. Ustanavlivaet predelnoe kolihestvo vozvrahaemyh dannyh. (required)
        :param int next: Parametr paginacii. Ustanavlivaet znahenie, s kotorogo nado poluhit sleduuhii paket dannyh. Dla poluhenia polnogo spiska dannyh dolhen byt raven 0 v pervom zaprose. Dla sleduuhih zaprosov neobhodimo brat znahenia iz odnoimennogo pola v otvete. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'next']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `api_v3_supplies_get`")  # noqa: E501
        # verify the required parameter 'next' is set
        if ('next' not in params or
                params['next'] is None):
            raise ValueError("Missing the required parameter `next` when calling `api_v3_supplies_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'next' in params:
            query_params.append(('next', params['next']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_post(self, body, **kwargs):  # noqa: E501
        """Sozdat novuu postavku  # noqa: E501

        **Ogranihenia raboty s postavkami**:  - Tolko dla sborohnyh zadanii po sheme \"Vezu na sklad WB\" - Pri dobavlenii v postavku vse peredavaemye sborohnye zadania v statuse **new** (\"Novoe\") budut avtomatiheski perevedeny v status **confirm** (\"Na sborke\"). - Obratite vnimanie, hto esli vy perevedete sborohnoe zadanie v status **cancel** (\"Otmena prodavcom\"), to sborohnoe zadanie avtomatiheski udalitsa iz postavki, esli bylo prikrepleno k nei. - Postavku mohno sobrat tolko iz sborohnyh zadanii (zakazov) odnogo gabaritnogo tipa (cargoType). Novaa postavka ne obladaet gabaritnym priznakom. Pri dobavlenii pervogo zakaza v postavku ona priobretaet gabaritnyi priznak etogo zakaza.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V3SuppliesBody body: (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Sozdat novuu postavku  # noqa: E501

        **Ogranihenia raboty s postavkami**:  - Tolko dla sborohnyh zadanii po sheme \"Vezu na sklad WB\" - Pri dobavlenii v postavku vse peredavaemye sborohnye zadania v statuse **new** (\"Novoe\") budut avtomatiheski perevedeny v status **confirm** (\"Na sborke\"). - Obratite vnimanie, hto esli vy perevedete sborohnoe zadanie v status **cancel** (\"Otmena prodavcom\"), to sborohnoe zadanie avtomatiheski udalitsa iz postavki, esli bylo prikrepleno k nei. - Postavku mohno sobrat tolko iz sborohnyh zadanii (zakazov) odnogo gabaritnogo tipa (cargoType). Novaa postavka ne obladaet gabaritnym priznakom. Pri dobavlenii pervogo zakaza v postavku ona priobretaet gabaritnyi priznak etogo zakaza.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V3SuppliesBody body: (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v3_supplies_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_barcode_get(self, supply_id, type, **kwargs):  # noqa: E501
        """Poluhit QR postavki  # noqa: E501

        Vozvrahaet QR v svg, zplv (vertikalnyi), zplh (gorizontalnyi), png. <br> Mohno poluhit, tolko esli postavka peredana v dostavku. <dt>Dostupnye razmery:</dt> <dd>580x400 pikselei   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_barcode_get(supply_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :param str type: Tip etiketki (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_barcode_get_with_http_info(supply_id, type, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_barcode_get_with_http_info(supply_id, type, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_barcode_get_with_http_info(self, supply_id, type, **kwargs):  # noqa: E501
        """Poluhit QR postavki  # noqa: E501

        Vozvrahaet QR v svg, zplv (vertikalnyi), zplh (gorizontalnyi), png. <br> Mohno poluhit, tolko esli postavka peredana v dostavku. <dt>Dostupnye razmery:</dt> <dd>580x400 pikselei   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_barcode_get_with_http_info(supply_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :param str type: Tip etiketki (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_barcode_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_barcode_get`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `api_v3_supplies_supply_id_barcode_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/barcode', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_delete(self, supply_id, **kwargs):  # noqa: E501
        """Udalit postavku  # noqa: E501

        Udalaet postavku, esli ona aktivna i za nei ne zakrepleno ni odno sborohnoe zadanie.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_delete(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_delete_with_http_info(supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_delete_with_http_info(supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_delete_with_http_info(self, supply_id, **kwargs):  # noqa: E501
        """Udalit postavku  # noqa: E501

        Udalaet postavku, esli ona aktivna i za nei ne zakrepleno ni odno sborohnoe zadanie.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_delete_with_http_info(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_deliver_patch(self, supply_id, **kwargs):  # noqa: E501
        """Peredat postavku v dostavku  # noqa: E501

        Zakryvaet postavku i perevodit vse sborohnye zadania v nei v status **complete** (\"V dostavke\"). Posle zakrytia postavki novye sborohnye zadania k nei dobavit budet nevozmohno. Peredat postavku v dostavku mohno tolko pri nalihii v nei hota by odnogo sborohnogo zadania i otsutstvii pustyh korobov.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_deliver_patch(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_deliver_patch_with_http_info(supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_deliver_patch_with_http_info(supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_deliver_patch_with_http_info(self, supply_id, **kwargs):  # noqa: E501
        """Peredat postavku v dostavku  # noqa: E501

        Zakryvaet postavku i perevodit vse sborohnye zadania v nei v status **complete** (\"V dostavke\"). Posle zakrytia postavki novye sborohnye zadania k nei dobavit budet nevozmohno. Peredat postavku v dostavku mohno tolko pri nalihii v nei hota by odnogo sborohnogo zadania i otsutstvii pustyh korobov.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_deliver_patch_with_http_info(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_deliver_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_deliver_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/deliver', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_get(self, supply_id, **kwargs):  # noqa: E501
        """Poluhit informaciu o postavke  # noqa: E501

        Vozvrahaet informaciu o postavke.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_get(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :return: Supply
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_get_with_http_info(supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_get_with_http_info(supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_get_with_http_info(self, supply_id, **kwargs):  # noqa: E501
        """Poluhit informaciu o postavke  # noqa: E501

        Vozvrahaet informaciu o postavke.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_get_with_http_info(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :return: Supply
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Supply',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_orders_get(self, supply_id, **kwargs):  # noqa: E501
        """Poluhit sborohnye zadania v postavke  # noqa: E501

        Vozvrahaet sborohnye zadania, zakreplennye za postavkoi.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_orders_get(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_orders_get_with_http_info(supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_orders_get_with_http_info(supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_orders_get_with_http_info(self, supply_id, **kwargs):  # noqa: E501
        """Poluhit sborohnye zadania v postavke  # noqa: E501

        Vozvrahaet sborohnye zadania, zakreplennye za postavkoi.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_orders_get_with_http_info(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_orders_order_id_patch(self, supply_id, order_id, **kwargs):  # noqa: E501
        """Dobavit k postavke sborohnoe zadanie  # noqa: E501

        Dobavlaet k postavke sborohnoe zadanie i perevodit ego v status **confirm** (\"Na sborke\").  <br> Takhe mohet peremehat sborohnoe zadanie mehdu aktivnymi postavkami, libo iz zakrytoi v aktivnuu pri uslovii, hto sborohnoe zadanie trebuet povtornoi otgruzki. <br> <br> `Vahno!` <br> V pustuu postavku mohno dobavit sborohnoe zadanie lubogo gabaritnogo tipa. <br> Posle dobavlenia pervogo zadania postavka priobretaet gabaritnyi tip etogo zadania, sm. znahenie pola `cargoType` v otvete metoda <b>\"Poluhit informaciu o postavke\"</b>. <br> Posle etogo dobavit v postavku mohno tolko te zadania, gabaritnyi tip kotoryh sootvetstvuet takovomu u postavki.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_orders_order_id_patch(supply_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_orders_order_id_patch_with_http_info(supply_id, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_orders_order_id_patch_with_http_info(supply_id, order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_orders_order_id_patch_with_http_info(self, supply_id, order_id, **kwargs):  # noqa: E501
        """Dobavit k postavke sborohnoe zadanie  # noqa: E501

        Dobavlaet k postavke sborohnoe zadanie i perevodit ego v status **confirm** (\"Na sborke\").  <br> Takhe mohet peremehat sborohnoe zadanie mehdu aktivnymi postavkami, libo iz zakrytoi v aktivnuu pri uslovii, hto sborohnoe zadanie trebuet povtornoi otgruzki. <br> <br> `Vahno!` <br> V pustuu postavku mohno dobavit sborohnoe zadanie lubogo gabaritnogo tipa. <br> Posle dobavlenia pervogo zadania postavka priobretaet gabaritnyi tip etogo zadania, sm. znahenie pola `cargoType` v otvete metoda <b>\"Poluhit informaciu o postavke\"</b>. <br> Posle etogo dobavit v postavku mohno tolko te zadania, gabaritnyi tip kotoryh sootvetstvuet takovomu u postavki.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_orders_order_id_patch_with_http_info(supply_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_orders_order_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_orders_order_id_patch`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_supplies_supply_id_orders_order_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/orders/{orderId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_trbx_delete(self, supply_id, **kwargs):  # noqa: E501
        """Udalit koroba iz postavki  # noqa: E501

        Ubiraet zakazy iz perehislennyh korobov postavki i udalaet koroba. Mohno udalit, tolko poka postavka na sborke.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_delete(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :param SupplyIdTrbxBody1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_trbx_delete_with_http_info(supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_trbx_delete_with_http_info(supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_trbx_delete_with_http_info(self, supply_id, **kwargs):  # noqa: E501
        """Udalit koroba iz postavki  # noqa: E501

        Ubiraet zakazy iz perehislennyh korobov postavki i udalaet koroba. Mohno udalit, tolko poka postavka na sborke.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_delete_with_http_info(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :param SupplyIdTrbxBody1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_trbx_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_trbx_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/trbx', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_trbx_get(self, supply_id, **kwargs):  # noqa: E501
        """Poluhit spisok korobov postavki  # noqa: E501

        Vozvrahaet spisok korobov i identifikatory zakazov, vhodahih v nih.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_get(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_trbx_get_with_http_info(supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_trbx_get_with_http_info(supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_trbx_get_with_http_info(self, supply_id, **kwargs):  # noqa: E501
        """Poluhit spisok korobov postavki  # noqa: E501

        Vozvrahaet spisok korobov i identifikatory zakazov, vhodahih v nih.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_get_with_http_info(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_trbx_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_trbx_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/trbx', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_trbx_post(self, supply_id, **kwargs):  # noqa: E501
        """Dobavit koroba k postavke  # noqa: E501

        Dobavlaet trebuemoe kolihestvo korobov v postavku. Mohno dobavit, tolko poka postavka na sborke.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_post(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :param SupplyIdTrbxBody body:
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_trbx_post_with_http_info(supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_trbx_post_with_http_info(supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_trbx_post_with_http_info(self, supply_id, **kwargs):  # noqa: E501
        """Dobavit koroba k postavke  # noqa: E501

        Dobavlaet trebuemoe kolihestvo korobov v postavku. Mohno dobavit, tolko poka postavka na sborke.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_post_with_http_info(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :param SupplyIdTrbxBody body:
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_trbx_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_trbx_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/trbx', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_trbx_stickers_post(self, type, supply_id, **kwargs):  # noqa: E501
        """Poluhit stikery korobov postavki  # noqa: E501

        Vozvrahaet stikery QR v svg, zplv (vertikalnyi), zplh (gorizontalnyi), png.<br> Mohno poluhit, tolko esli v korobe est zakazy. <dt>Razmer stikerov: 580x400 pikselei</dt>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_stickers_post(type, supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Tip etiketki (required)
        :param str supply_id: ID postavki (required)
        :param TrbxStickersBody body:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_trbx_stickers_post_with_http_info(type, supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_trbx_stickers_post_with_http_info(type, supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_trbx_stickers_post_with_http_info(self, type, supply_id, **kwargs):  # noqa: E501
        """Poluhit stikery korobov postavki  # noqa: E501

        Vozvrahaet stikery QR v svg, zplv (vertikalnyi), zplh (gorizontalnyi), png.<br> Mohno poluhit, tolko esli v korobe est zakazy. <dt>Razmer stikerov: 580x400 pikselei</dt>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_stickers_post_with_http_info(type, supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Tip etiketki (required)
        :param str supply_id: ID postavki (required)
        :param TrbxStickersBody body:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'supply_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_trbx_stickers_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `api_v3_supplies_supply_id_trbx_stickers_post`")  # noqa: E501
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_trbx_stickers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/trbx/stickers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete(self, supply_id, trbx_id, order_id, **kwargs):  # noqa: E501
        """Udalit zakaz iz koroba  # noqa: E501

        Udalaet zakaz iz koroba vybrannoi postavki. Mohno udalit, tolko poka postavka na sborke.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete(supply_id, trbx_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :param str trbx_id: ID koroba (required)
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete_with_http_info(supply_id, trbx_id, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete_with_http_info(supply_id, trbx_id, order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete_with_http_info(self, supply_id, trbx_id, order_id, **kwargs):  # noqa: E501
        """Udalit zakaz iz koroba  # noqa: E501

        Udalaet zakaz iz koroba vybrannoi postavki. Mohno udalit, tolko poka postavka na sborke.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete_with_http_info(supply_id, trbx_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :param str trbx_id: ID koroba (required)
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id', 'trbx_id', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete`")  # noqa: E501
        # verify the required parameter 'trbx_id' is set
        if ('trbx_id' not in params or
                params['trbx_id'] is None):
            raise ValueError("Missing the required parameter `trbx_id` when calling `api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501
        if 'trbx_id' in params:
            path_params['trbxId'] = params['trbx_id']  # noqa: E501
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/trbx/{trbxId}/orders/{orderId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_trbx_trbx_id_patch(self, supply_id, trbx_id, **kwargs):  # noqa: E501
        """Dobavit zakazy k korobu  # noqa: E501

        Dobavlaet zakazy v korob dla vybrannoi postavki. Mohno dobavit, tolko poka postavka na sborke.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_trbx_id_patch(supply_id, trbx_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :param str trbx_id: ID koroba (required)
        :param TrbxTrbxIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_trbx_trbx_id_patch_with_http_info(supply_id, trbx_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_trbx_trbx_id_patch_with_http_info(supply_id, trbx_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_trbx_trbx_id_patch_with_http_info(self, supply_id, trbx_id, **kwargs):  # noqa: E501
        """Dobavit zakazy k korobu  # noqa: E501

        Dobavlaet zakazy v korob dla vybrannoi postavki. Mohno dobavit, tolko poka postavka na sborke.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_trbx_id_patch_with_http_info(supply_id, trbx_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: ID postavki (required)
        :param str trbx_id: ID koroba (required)
        :param TrbxTrbxIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id', 'trbx_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_trbx_trbx_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_trbx_trbx_id_patch`")  # noqa: E501
        # verify the required parameter 'trbx_id' is set
        if ('trbx_id' not in params or
                params['trbx_id'] is None):
            raise ValueError("Missing the required parameter `trbx_id` when calling `api_v3_supplies_supply_id_trbx_trbx_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501
        if 'trbx_id' in params:
            path_params['trbxId'] = params['trbx_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/trbx/{trbxId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
