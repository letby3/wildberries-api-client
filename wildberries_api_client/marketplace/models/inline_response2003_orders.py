# coding: utf-8

"""
    Opisanie API Marketplace

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2003Orders(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'supplier_status': 'str',
        'wb_status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'supplier_status': 'supplierStatus',
        'wb_status': 'wbStatus'
    }

    def __init__(self, id=None, supplier_status=None, wb_status=None):  # noqa: E501
        """InlineResponse2003Orders - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._supplier_status = None
        self._wb_status = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if supplier_status is not None:
            self.supplier_status = supplier_status
        if wb_status is not None:
            self.wb_status = wb_status

    @property
    def id(self):
        """Gets the id of this InlineResponse2003Orders.  # noqa: E501

        Identifikator sborohnogo zadania  # noqa: E501

        :return: The id of this InlineResponse2003Orders.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2003Orders.

        Identifikator sborohnogo zadania  # noqa: E501

        :param id: The id of this InlineResponse2003Orders.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def supplier_status(self):
        """Gets the supplier_status of this InlineResponse2003Orders.  # noqa: E501

        Status sborohnogo zadania prodavca (ustanavlivaetsa prodavcom)  # noqa: E501

        :return: The supplier_status of this InlineResponse2003Orders.  # noqa: E501
        :rtype: str
        """
        return self._supplier_status

    @supplier_status.setter
    def supplier_status(self, supplier_status):
        """Sets the supplier_status of this InlineResponse2003Orders.

        Status sborohnogo zadania prodavca (ustanavlivaetsa prodavcom)  # noqa: E501

        :param supplier_status: The supplier_status of this InlineResponse2003Orders.  # noqa: E501
        :type: str
        """
        allowed_values = ["new", "confirm", "complete", "cancel"]  # noqa: E501
        if supplier_status not in allowed_values:
            raise ValueError(
                "Invalid value for `supplier_status` ({0}), must be one of {1}"  # noqa: E501
                .format(supplier_status, allowed_values)
            )

        self._supplier_status = supplier_status

    @property
    def wb_status(self):
        """Gets the wb_status of this InlineResponse2003Orders.  # noqa: E501

        Status sborohnogo zadania v sisteme Wildberries  # noqa: E501

        :return: The wb_status of this InlineResponse2003Orders.  # noqa: E501
        :rtype: str
        """
        return self._wb_status

    @wb_status.setter
    def wb_status(self, wb_status):
        """Sets the wb_status of this InlineResponse2003Orders.

        Status sborohnogo zadania v sisteme Wildberries  # noqa: E501

        :param wb_status: The wb_status of this InlineResponse2003Orders.  # noqa: E501
        :type: str
        """
        allowed_values = ["waiting", "sorted", "sold", "canceled", "canceled_by_client"]  # noqa: E501
        if wb_status not in allowed_values:
            raise ValueError(
                "Invalid value for `wb_status` ({0}), must be one of {1}"  # noqa: E501
                .format(wb_status, allowed_values)
            )

        self._wb_status = wb_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003Orders, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003Orders):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
