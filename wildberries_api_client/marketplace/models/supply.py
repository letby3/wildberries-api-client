# coding: utf-8

"""
    Opisanie API Marketplace

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Supply(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'done': 'bool',
        'created_at': 'datetime',
        'closed_at': 'datetime',
        'scan_dt': 'datetime',
        'name': 'str',
        'cargo_type': 'int'
    }

    attribute_map = {
        'id': 'id',
        'done': 'done',
        'created_at': 'createdAt',
        'closed_at': 'closedAt',
        'scan_dt': 'scanDt',
        'name': 'name',
        'cargo_type': 'cargoType'
    }

    def __init__(self, id=None, done=None, created_at=None, closed_at=None, scan_dt=None, name=None, cargo_type=None):  # noqa: E501
        """Supply - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._done = None
        self._created_at = None
        self._closed_at = None
        self._scan_dt = None
        self._name = None
        self._cargo_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if done is not None:
            self.done = done
        if created_at is not None:
            self.created_at = created_at
        if closed_at is not None:
            self.closed_at = closed_at
        if scan_dt is not None:
            self.scan_dt = scan_dt
        if name is not None:
            self.name = name
        if cargo_type is not None:
            self.cargo_type = cargo_type

    @property
    def id(self):
        """Gets the id of this Supply.  # noqa: E501

        Identifikator postavki  # noqa: E501

        :return: The id of this Supply.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Supply.

        Identifikator postavki  # noqa: E501

        :param id: The id of this Supply.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def done(self):
        """Gets the done of this Supply.  # noqa: E501

        Flag zakrytia postavki  # noqa: E501

        :return: The done of this Supply.  # noqa: E501
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this Supply.

        Flag zakrytia postavki  # noqa: E501

        :param done: The done of this Supply.  # noqa: E501
        :type: bool
        """

        self._done = done

    @property
    def created_at(self):
        """Gets the created_at of this Supply.  # noqa: E501

        Data sozdania postavki (RFC3339)  # noqa: E501

        :return: The created_at of this Supply.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Supply.

        Data sozdania postavki (RFC3339)  # noqa: E501

        :param created_at: The created_at of this Supply.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def closed_at(self):
        """Gets the closed_at of this Supply.  # noqa: E501

        Data zakrytia postavki (RFC3339)  # noqa: E501

        :return: The closed_at of this Supply.  # noqa: E501
        :rtype: datetime
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at):
        """Sets the closed_at of this Supply.

        Data zakrytia postavki (RFC3339)  # noqa: E501

        :param closed_at: The closed_at of this Supply.  # noqa: E501
        :type: datetime
        """

        self._closed_at = closed_at

    @property
    def scan_dt(self):
        """Gets the scan_dt of this Supply.  # noqa: E501

        Data skana postavki (RFC3339)  # noqa: E501

        :return: The scan_dt of this Supply.  # noqa: E501
        :rtype: datetime
        """
        return self._scan_dt

    @scan_dt.setter
    def scan_dt(self, scan_dt):
        """Sets the scan_dt of this Supply.

        Data skana postavki (RFC3339)  # noqa: E501

        :param scan_dt: The scan_dt of this Supply.  # noqa: E501
        :type: datetime
        """

        self._scan_dt = scan_dt

    @property
    def name(self):
        """Gets the name of this Supply.  # noqa: E501

        Naimenovanie postavki  # noqa: E501

        :return: The name of this Supply.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Supply.

        Naimenovanie postavki  # noqa: E501

        :param name: The name of this Supply.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def cargo_type(self):
        """Gets the cargo_type of this Supply.  # noqa: E501

        <dl> <dt>Tip postavki:</dt> <dd>0 - priznak otsutstvuet</dd> <dd>1 - obyhnaa</dd> <dd>2 - SGT (Soderhit sverhgabaritnye tovary)</dd> <dd>3 - KGT (Soderhit krupnogabaritnye tovary). Ne ispolzuetsa na dannyi moment.</dd> </dl>   # noqa: E501

        :return: The cargo_type of this Supply.  # noqa: E501
        :rtype: int
        """
        return self._cargo_type

    @cargo_type.setter
    def cargo_type(self, cargo_type):
        """Sets the cargo_type of this Supply.

        <dl> <dt>Tip postavki:</dt> <dd>0 - priznak otsutstvuet</dd> <dd>1 - obyhnaa</dd> <dd>2 - SGT (Soderhit sverhgabaritnye tovary)</dd> <dd>3 - KGT (Soderhit krupnogabaritnye tovary). Ne ispolzuetsa na dannyi moment.</dd> </dl>   # noqa: E501

        :param cargo_type: The cargo_type of this Supply.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if cargo_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cargo_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cargo_type, allowed_values)
            )

        self._cargo_type = cargo_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Supply, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Supply):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
