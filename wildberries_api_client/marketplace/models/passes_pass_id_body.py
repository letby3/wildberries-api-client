# coding: utf-8

"""
    Opisanie API Marketplace

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PassesPassIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'car_model': 'str',
        'car_number': 'str',
        'office_id': 'int'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'car_model': 'carModel',
        'car_number': 'carNumber',
        'office_id': 'officeId'
    }

    def __init__(self, first_name=None, last_name=None, car_model=None, car_number=None, office_id=None):  # noqa: E501
        """PassesPassIdBody - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._car_model = None
        self._car_number = None
        self._office_id = None
        self.discriminator = None
        self.first_name = first_name
        self.last_name = last_name
        self.car_model = car_model
        self.car_number = car_number
        self.office_id = office_id

    @property
    def first_name(self):
        """Gets the first_name of this PassesPassIdBody.  # noqa: E501

        Ima voditela  # noqa: E501

        :return: The first_name of this PassesPassIdBody.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PassesPassIdBody.

        Ima voditela  # noqa: E501

        :param first_name: The first_name of this PassesPassIdBody.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this PassesPassIdBody.  # noqa: E501

        Familia voditela  # noqa: E501

        :return: The last_name of this PassesPassIdBody.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PassesPassIdBody.

        Familia voditela  # noqa: E501

        :param last_name: The last_name of this PassesPassIdBody.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def car_model(self):
        """Gets the car_model of this PassesPassIdBody.  # noqa: E501

        Marka mahiny  # noqa: E501

        :return: The car_model of this PassesPassIdBody.  # noqa: E501
        :rtype: str
        """
        return self._car_model

    @car_model.setter
    def car_model(self, car_model):
        """Sets the car_model of this PassesPassIdBody.

        Marka mahiny  # noqa: E501

        :param car_model: The car_model of this PassesPassIdBody.  # noqa: E501
        :type: str
        """
        if car_model is None:
            raise ValueError("Invalid value for `car_model`, must not be `None`")  # noqa: E501

        self._car_model = car_model

    @property
    def car_number(self):
        """Gets the car_number of this PassesPassIdBody.  # noqa: E501

        Nomer mahiny  # noqa: E501

        :return: The car_number of this PassesPassIdBody.  # noqa: E501
        :rtype: str
        """
        return self._car_number

    @car_number.setter
    def car_number(self, car_number):
        """Sets the car_number of this PassesPassIdBody.

        Nomer mahiny  # noqa: E501

        :param car_number: The car_number of this PassesPassIdBody.  # noqa: E501
        :type: str
        """
        if car_number is None:
            raise ValueError("Invalid value for `car_number`, must not be `None`")  # noqa: E501

        self._car_number = car_number

    @property
    def office_id(self):
        """Gets the office_id of this PassesPassIdBody.  # noqa: E501

        ID sklada  # noqa: E501

        :return: The office_id of this PassesPassIdBody.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this PassesPassIdBody.

        ID sklada  # noqa: E501

        :param office_id: The office_id of this PassesPassIdBody.  # noqa: E501
        :type: int
        """
        if office_id is None:
            raise ValueError("Invalid value for `office_id`, must not be `None`")  # noqa: E501

        self._office_id = office_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PassesPassIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PassesPassIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
